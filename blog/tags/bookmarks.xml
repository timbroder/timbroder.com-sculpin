<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/bookmarks.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Google I/O session videos posted with slides]]></title>
            <link href="https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html"/>
            <updated>2008-06-16T19:11:00+00:00</updated>
            <id>https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html</id>
            <content type="html"><![CDATA[<p>As I said <a href="http://blog.gpowered.net/2008/04/select-google-io-sessions-to-be-posted.html">earlier</a>, Quite a few presentations from Google I/O have
been <a href="http://sites.google.com/site/io/">posted</a> for your viewing pleasure.
I'll be glued to these this weekend while I'm on call.</p>

<p>Topics include<br />
Ajax<br />
KML<br />
Sketchup<br />
Android<br />
OpenSocial<br />
Appengine<br />
Data APIs<br />
Theory Talks<br />
Youtube<br />
Gears<br />
Mashups<br />
Maps<br />
and more!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Pulling Google Bookmarks with Python]]></title>
            <link href="https://www.timbroder.com/2007/08/howto-pulling-google-bookmarks-with.html"/>
            <updated>2007-08-11T21:22:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/howto-pulling-google-bookmarks-with.html</id>
            <content type="html"><![CDATA[<p>I love using <a href="http://www.google.com/bookmarks/">Google Bookmarks</a> (usually
with the <a href="http://toolbar.google.com">Google Toolbar</a>) because it lets me get
to my bookmarks at home on my laptop or desktop, at work, or anywhere. It's
great. Now I'm using those bookmarks to power the
<a href="http://gpowered.net/g/links/">links</a> section of
<a href="http://gpowered.net/g">gPowered.net</a><br />
First we're going to need the
<a href="http://code.google.com/p/httplib2/downloads/list">httplib2</a> library so we can
authenticate against Google and grab the bookmark feed and then the
<a href="http://effbot.org/zone/element-index.htm">ElementTree</a> to help process the
rss feed.</p>

<pre><code>import httplib2
from elementtree import ElementTree
</code></pre>

<p>Then we'll setup the link to pull the rss from, authenticate against the
request, and pull back the feed</p>

<pre><code>login = "timothy.broder@gmail.com"  
password = "*****"
url = 'https://www.google.com/bookmarks/?output=rss&amp;num;=1000'  

h = httplib2.Http()  
h.add_credentials(login, password)  

resp, content = h.request(url, "POST", body="nt", headers={'content-type':'text/plain'} )
</code></pre>

<p>I figured for this a hashmap (or dictionary) would work well using the tags on
the bookmarks as keys, pointing to lists of bookmarks. Then when we display
them, just iterate through the keys. I also kept a list of the keys to make
sorting faster later on. So we define our objects and then loop through the
rss object pulling out the tags for keys, the names of the links, and the
urls. I define a small Bookmark class which holds a name and url which will go
into the hashmap to make storing the bookmark's easier. When I try to add a
bookmark to the dict's list I try to append it, if the key(tag) doesn't exist
I know I have to start a new list.</p>

<pre><code>class Bookmark:
 def __init__(self, name, link):
  self.name = name
  self.link = link

d = dict()
sort_keys = []
for item in tree.findall('item'):
 key = item.findtext('{http://www.google.com/searchhistory}bkmk_label')
 if (key != None) and (key != 'gpowered') and (key != 'BP') and (key != 'Quick Searches') and (key != 'Me'):
  title = item.findtext('title')
  link = item.findtext('link')
  try:
   d[key].append(Bookmark(title.encode('utf-8'), link))
  except KeyError:
   d[key] = [Bookmark(title.encode('utf-8'), link)]
   sort_keys.append(key)
</code></pre>

<p>Then we'll sort the key list and the list of each key. To do this we need a
small function that defines how to sort a bookmark</p>

<pre><code>def bookmark_compare(a, b):
 return cmp(a.name, b.name)

sort_keys.sort() 
for key in sort_keys:
 d[key].sort(bookmark_compare)
</code></pre>

<p>Check out the static HTML version <a href="http://gpowered.net/g/links/simple">Here</a>.
I also made a <a href="http://gpowered.net/g/links/">fancier version</a> using
<a href="http://developer.yahoo.com/yui/">YUI</a>'s
<a href="http://developer.yahoo.com/yui/treeview/">TreeView</a></p>
]]></content>
        </entry>
    </feed>