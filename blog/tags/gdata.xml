<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/gdata.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Quick Google Authentication in PHP]]></title>
            <link href="https://www.timbroder.com/2009/06/quick-google-authentication-in-php.html"/>
            <updated>2009-06-02T15:02:00+00:00</updated>
            <id>https://www.timbroder.com/2009/06/quick-google-authentication-in-php.html</id>
            <content type="html"><![CDATA[<p>Here is a quick way to authenticate against Google and retrieve a protected
feed. It does not use the supported ClientLogin method but it does allow you
to get to some unsupported feeds (Reader, Bookmarks, etc) The <a href="http://framework.zend.com/download/gdata">Zend Gdata
library</a> is required</p>

<pre><code data-language="PHP">$show_list       = 'show-google-reader-sub-list';  //the hook in a page
$login          = '';
$pass          = '';
$source         = 'wordpress-google-reader-sub-list-';  //the source the api sees when logging into Google
$service         = 'reader';  
$login_url        = 'https://www.google.com/accounts/ServiceLoginAuth?service=mail'; //URL to login to google
$subscription_list_url  = 'http://www.google.com/reader/api/0/subscription/list'; //URL that holds a users subscriptions


$client = new Zend_Http_Client($login_url);

//connect, authenticate, and handshake with Google
$client-&gt;setCookieJar()
-&gt;setMethod(Zend_Http_Client::POST)
-&gt;setParameterPost(array(
 'continue'             =&gt; $subscription_list_url,
 'service'              =&gt; 'reader',
 'niu'                  =&gt; 1,
 'hl'                   =&gt; 'en',
 'Email'              =&gt; $login,
 'Passwd'               =&gt; $pass,
 'PersistentCookie'     =&gt; 'yes',
 'asts'                 =&gt; ''
));


$response = $client-&gt;request('POST');
$client-&gt;setUri($subscription_list_url)-&gt;setMethod(Zend_Http_Client::GET);
$response = $client-&gt;request()-&gt;getBody();

if ($client-&gt;request()-&gt;getStatus() == 400) {
?&gt;Unable to login with supplied Google login/password```
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Google I/O session videos posted with slides]]></title>
            <link href="https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html"/>
            <updated>2008-06-16T19:11:00+00:00</updated>
            <id>https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html</id>
            <content type="html"><![CDATA[<p>As I said <a href="http://blog.gpowered.net/2008/04/select-google-io-sessions-to-be-posted.html">earlier</a>, Quite a few presentations from Google I/O have
been <a href="http://sites.google.com/site/io/">posted</a> for your viewing pleasure.
I'll be glued to these this weekend while I'm on call.</p>

<p>Topics include<br />
Ajax<br />
KML<br />
Sketchup<br />
Android<br />
OpenSocial<br />
Appengine<br />
Data APIs<br />
Theory Talks<br />
Youtube<br />
Gears<br />
Mashups<br />
Maps<br />
and more!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[October Speedlinking]]></title>
            <link href="https://www.timbroder.com/2007/11/october-speedlinking.html"/>
            <updated>2007-11-05T23:17:00+00:00</updated>
            <id>https://www.timbroder.com/2007/11/october-speedlinking.html</id>
            <content type="html"><![CDATA[<p>I haven't been able to post as often or as in depth as I'd like to have this
past month. I chalk it up mostly to work, we all love 12 hour days right? But
now that sign-off has passed and our last release of 2007 is calmly
approaching (its on Friday), things have settled down a bit. Below are some
great links from October, most of which I wanted to mention at some point and
haven't gotten a chance to until now. Enjoy.</p>

<ul>
<li><p>The <a href="http://googlemashupeditor.blogspot.com/2007/09/authenticated-calendar-support-via-new.html">JavaScript Library</a> for Google Calendar was released. This allows for authenticated, cross domain access. Hopefully Picasa Web will follow suit.</p></li>
<li><p><a href="http://googlewebtoolkit.blogspot.com/2007/09/gwt-application-development-for-iphone.html">GWT</a> goes to the iPhone</p></li>
<li><p>The <a href="http://googledataapis.blogspot.com/2007/09/python-client-library-same-great-taste.html">Python Client Library</a> came out with version 1.0.8</p></li>
<li><p>The <a href="http://gearsblog.blogspot.com/2007/09/digg-oracle-using-workerpool-as-well-as.html">Digg Oracle</a> demonstrates Gears' Worker Pool</p></li>
<li><p>Google's <a href="http://googlified.com/2007google-stock-passes-600-mark/#comment-17313">Stock broke $600</a>. It is now well over $700</p></li>
<li><p><a href="http://mashable.com/2007/10/08/orkut/">Orkut</a> ramps up for a US push</p></li>
<li><p><a href="http://gearsblog.blogspot.com/2007/10/vortex-simple-new-offline-and-sync.html">Vortex</a> combines the know-how of Dojo and Gears</p></li>
<li><p><a href="http://googlemapsapi.blogspot.com/2007/10/labeledmarker-v11-now-supporting-marker.html">LabeledMarker v1.1</a> in Google Maps comes out with Marker and Label toggling</p></li>
<li><p>Google Reader comes out with <a href="http://googlesystem.blogspot.com/2007/10/find-number-of-google-subscribers-for.html">Subscriber stats</a>. Read about the controversy <a href="http://blog.gpowered.net/2007/10/google-reader-stats-out-of-wack.html">here</a>. Google responds <a href="http://googlereader.blogspot.com/2007/10/subscriber-stats-summed-up.html">here</a></p></li>
<li><p><a href="http://googlesystem.blogspot.com/2007/10/google-maps-becomes-social.html">Google Maps Goes Social</a></p></li>
<li><p>The <a href="http://googleajaxsearchapi.blogspot.com/2007/10/direct-access-to-youtube-channels.html">AJAX Search API</a> gives direct access to YouTube Channels</p></li>
<li><p>Blogger GData JavaScript client library released with <a href="http://google-code-updates.blogspot.com/2007/10/blogger-gdata-javascript-client-library.html">offline Blogger client example</a></p></li>
<li><p>Google Code Search <a href="http://google-code-updates.blogspot.com/2007/10/tell-us-about-code-on-your-site-with.html">goes to SiteMaps</a></p></li>
<li><p>The Ajax API gets <a href="http://googleajaxsearchapi.blogspot.com/2007/10/ajax-feed-api-addition-dynamic-feed.html">Dynamic Feed Control</a></p></li>
<li><p>You can now play <a href="http://google-latlong.blogspot.com/2007/10/now-playing-youtube-videos-in-google.html">Youtube videos in Google Earth</a></p></li>
<li><p>Summer of code wrapped up with <a href="http://google-code-updates.blogspot.com/2007/10/wrapping-up-our-third-summer-of-code.html">Graduation</a></p></li>
<li><p><a href="http://mashable.com/2007/10/24/google-finance-gadgets/">Google Finance adds new Gadgets and an API</a></p></li>
<li><p>YouTubes player becomes <a href="http://googlesystem.blogspot.com/2007/10/customize-youtubes-player.html">Customizable</a></p></li>
<li><p>A Greasemonkey script lets you have <a href="http://googlesystem.blogspot.com/2007/10/nested-folders-in-gmail.html">nested folders</a> in Gmail</p></li>
<li><p>Blogger adds <a href="http://buzz.blogger.com/2007/10/subscribe-to-comments-by-email.html">Comment Notification</a></p></li>
<li><p>Google <a href="http://www.entrepreneurs-journey.com/864/possible-explanations-for-the-pagerank-penalty-sweep/"> cracks down</a> on pages selling PageRank links</p></li>
<li><p>Google contributes to <a href="http://mashable.com/2007/10/25/mysql-google/">MySQL</a></p></li>
<li><p>Google Mac <a href="http://googlemac.blogspot.com/2007/10/google-desktop-update-for-leopard.html">updates Leopard</a></p></li>
<li><p>Gmail <a href="http://gmailblog.blogspot.com/2007/10/sync-your-inbox-across-devices-with.html">enables IMAP</a></p></li>
<li><p>Google Maps gets <a href="http://googlemapsapi.blogspot.com/2007/10/clickable-polys-old-school-image-maps.html">Clickable Polygons</a></p></li>
<li><p>There is now a wizard for adding <a href="http://bloggerindraft.blogspot.com/2007/10/new-feature-gadgets-for-your-blog.html">Google Gadgets to your blog</a></p></li>
<li><p>Webmaster central fixes the <a href="http://googlewebmastercentral.blogspot.com/2007/10/dealing-with-sitemap-cross-submissions.html">Cross Domain Sitemap errors</a></p></li>
<li><p>Google maps <a href="http://feeds.feedburner.com/~r/OfficialGoogleMapsApiBlog/~3/174019883/make-your-kml-flash-y.html">adds Flash Content</a> into KLM</p></li>
<li><p><a href="http://googlesystem.blogspot.com/2007/11/google-notebook-adds-labels-and.html">Google Notebook adds labels and bookmarks</a></p></li>
<li><p>Blog Search is <a href="http://googlesystem.blogspot.com/2007/11/blog-search-included-in-google-history.html">now included</a> in Google History</p></li>
<li><p>A cheap "<a href="http://googlesystem.blogspot.com/2007/11/tentative-google-pc.html">Google PC</a>" is on the market</p></li>
<li><p>A new <a href="http://googlesystem.blogspot.com/2007/10/google-photo-picker.html">Photo Picker</a> for Gmail and Orkut pulls from Picasa</p></li>
<li><p>GTalk may soon be able to <a href="http://googlesystem.blogspot.com/2007/10/google-to-connect-to-other-im-networks.html">connect to other networks</a> like AIM and Yahoo! Talk</p></li>
<li><p>The <a href="http://googlesystem.blogspot.com/2007/10/gmails-new-version-is-now-available.html">new version</a> of Gmail comes out</p></li>
<li><p>Google Code gets a <a href="http://googlified.com/2007new-google-code/">facelift</a></p></li>
<li><p>Webmaster Tools gets <a href="http://googlified.com/2007set-geographic-target-in-webmaster-tools/">Geographic Targeting</a></p></li>
<li><p>The Google Gadget Directory gets a <a href="http://blogoscoped.com/archive/2007-11-01-n78.html">facelift</a></p></li>
<li><p>Microsoft is going to release the <a href="http://mashable.com/2007/11/04/microsoft-sync-framework/">Microsoft Sync Framework</a> to compete with Gears</p></li>
<li><p>Picasa Web gets <a href="http://googlephotos.blogspot.com/2007/11/better-connections-with-picasa-web.html">opened</a>. (Flikr can transfer a picasa album to itself)</p></li>
<li><p>Webmasters can now <a href="http://googlewebmastercentral.blogspot.com/2007/10/webmasters-can-now-provide-feedback-on.html">provide feedback</a> on sitelinks</p></li>
<li><p><a href="http://gearsblog.blogspot.com/2007/10/bloggears-offline-blogger-client.html">Blog.gears</a> comes out</p></li>
<li><p>Mapplets gets a documentation and example <a href="http://googlemapsapi.blogspot.com/2007/10/updated-documentation-examples-for.html">update</a></p></li>
<li><p>New articles are posted for <a href="http://googlemapsapi.blogspot.com/2007/10/kml-articles-abound-its-about-time.html">KML</a></p></li>
<li><p>The Ajax slideshow gets a full <a href="http://googleajaxsearchapi.blogspot.com/2007/10/slide-show-update-full-control-panel.html">Control Panel</a></p></li>
<li><p><a href="http://googlemapsapi.blogspot.com/2007/10/map-of-dead-screen-overlayed-shoot-em_31.html">Map of the Dead!!</a> Google Maps overlay shooting game!</p></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Quick Docs Api Example (python)]]></title>
            <link href="https://www.timbroder.com/2007/08/quick-docs-api-example-python.html"/>
            <updated>2007-08-10T03:04:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/quick-docs-api-example-python.html</id>
            <content type="html"><![CDATA[<p>To use the gdata docs python client you need to upgrade to
<a href="http://code.google.com/p/gdata-python-client/downloads/list">1.0.7</a> or
higher. First thing is to import the modules you'll need.</p>

<pre><code data-language="python">import gdata.docs.service
import gdata.docs
</code></pre>

<p>Then, set up the usual authentication parameters for the client.</p>

<pre><code data-language="python">gd_client = gdata.docs.service.DocsService()
gd_client.email = 'timothy.broder'
gd_client.password = '*****'
gd_client.source = 'gpowered-docs-list-ex'
gd_client.ProgrammaticLogin()
</code></pre>

<p>The most basic query will just return all of your documents</p>

<pre><code data-language="python">feed = gd_client.GetDocumentListFeed()
</code></pre>

<p>However, if we want to display just the spreadsheets, we build the query like
this:</p>

<pre><code data-language="python">q = gdata.docs.service.DocumentQuery(categories=['spreadsheet'])
feed = gd_client.Query(q.ToUri())
</code></pre>

<p>Finally, we output the titles</p>

<pre><code data-language="python">if(len(feed.entry) == 0):
        print 'No entries in feed.\n'
for i, entry in enumerate(feed.entry):
        print '%s %s (%s)' % (i+1, entry.title.text.encode('UTF-8'))
</code></pre>

<p>If we wanted to, we could also import the DateTime library and show when the
document was last updated</p>

<pre><code data-language="python">import gdata.docs.service
import gdata.docs

from mx import DateTime

gd_client = gdata.docs.service.DocsService()
gd_client.email = 'timothy.broder'
gd_client.password = '*****'
gd_client.source = 'gpowered-docs-list-ex'
gd_client.ProgrammaticLogin()

q = gdata.docs.service.DocumentQuery(categories=['spreadsheet'])
#feed = gd_client.GetDocumentListFeed()
feed = gd_client.Query(q.ToUri())

if(len(feed.entry) == 0):
        print 'No entries in feed.\n'
for i, entry in enumerate(feed.entry):
        dt = DateTime.ISO.ParseDateTimeUTC(entry.updated.text)
        print '%s %s (%s)' % (i+1, entry.title.text.encode('UTF-8'), dt.strftime('%m/%d/%Y %I:%M %p'))
</code></pre>

<p>For me this outputs:</p>

<pre><code>1 TDP2006 Contact Info (11/18/2006 05:41 AM)
2 contact info (07/23/2006 08:15 PM)
3 Tim and Rob (08/09/2007 10:18 PM)
4 nyc happy hour spreadsheet (07/04/2007 08:25 PM)
5 public_spring_2006_roster (10/16/2006 12:40 AM)
6 dax2006 (11/12/2006 11:23 PM)
7 project dream (07/13/2007 03:54 AM)
8 Stuff Tim should get (06/13/2007 01:53 AM)
9 Erg Test Results - 9/26 (10/15/2006 01:02 AM)
10 Head of the Charles Regatta Itineary (10/17/2006 04:54 PM)
11 tvshows (11/02/2006 11:44 PM)
12 HF (10/01/2006 03:36 PM)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Displaying Blogger feeds with PHP]]></title>
            <link href="https://www.timbroder.com/2007/08/howto-displaying-blogger-feeds-with-php.html"/>
            <updated>2007-08-05T22:44:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/howto-displaying-blogger-feeds-with-php.html</id>
            <content type="html"><![CDATA[<p>This HOWTO is going to follow the basic structure of the
<a href="http://gpowered.net/g/post/2/">Python</a> one.</p>

<p>To start out you'll have to grab the <a href="http://framework.zend.com/download/gdata">Zend Google data Client
Library</a> and then set the
include_path so you can use it</p>

<pre><code data-language="PHP">ini_set("include_path", ".:../:./include:../include:/home/gpowered/webapps/php/includes/ZendGdata-1.0.1/library");
</code></pre>

<p>We then import the parts the we'll need:</p>

<pre><code data-language="PHP">require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Gdata');
Zend_Loader::loadClass('Zend_Gdata_Query');
Zend_Loader::loadClass('Zend_Gdata_ClientLogin');
</code></pre>

<p>One of the first things we're going to have to do is authenticate with google
services. There are two ways to do this: <a href="http://code.google.com/apis/blogger/developers_guide_php.html#auth_sub">AuthSub proxy authentication</a> which has a
user login using their own credentials, and <a href="http://code.google.com/apis/blogger/developers_guide_php.html#client_login"> ClientLogin username/password au
thentication</a> where you send a username and password. We will be using
ClientLogin. I built a small class called gPoweredBlogger to hold the
different parts I will need for this example.</p>

<pre><code data-language="PHP">class gPoweredBlogger{
    private $user;// = 'timothy.broder';
    private $pass;// = '**************';
    private $service;// = 'blogger';

    private $blog_id;// = '413573351281770670';
    private $uri;// = "http://www.blogger.com/feeds/" . $blog_id . "/posts/default";
    private $show_num;// = 5;

    private $client;// = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
    private $gdClient;// = new Zend_Gdata($client);
    private $query;// = new Zend_Gdata_Query($uri);

    private $total_posts;

    public $output;
</code></pre>

<p>Then we start setting up our call to the service.</p>

<pre><code data-language="PHP">public function __construct($user, $pass, $blog_id){
    $this-&gt;user = $user;
    $this-&gt;pass = $pass;
    $this-&gt;service = 'blogger';

    $this-&gt;blog_id = $blog_id;
    $this-&gt;uri = "http://www.blogger.com/feeds/" . $this-&gt;blog_id . "/posts/default";
    $this-&gt;show_num = 5;

    $this-&gt;client = Zend_Gdata_ClientLogin::getHttpClient($this-&gt;user, $this-&gt;pass, $this-&gt;service);
    $this-&gt;gdClient = new Zend_Gdata($this-&gt;client);
    $this-&gt;query = new Zend_Gdata_Query($this-&gt;uri);
    $this-&gt;total_posts = $this-&gt;get_total($this-&gt;query);
}
</code></pre>

<p>For more info see the <a href="http://code.google.com/apis/blogger/developers_guide_php.html">blogger developer's guide with
php</a> or the
<a href="http://code.google.com/apis/accounts/Authentication.html">Google Account Authentication
documentation</a><br />
After we have authenticated with Google we need to start building up our query
to <a href="http://code.google.com/apis/gdata/">GData</a>. The first thing you'll need is
your blog's id.<br />
You can use the function in the dev guide to help you with this if you don't
already know it.<br />
Like the Python version, the below function returns the total number of posts
that are in the feed. We can get a small response by sending 0 for the max
results. Below is the function and the small response we get from it.</p>

<pre><code data-language="PHP">private function get_total($query){
    //query for no posts
    $this-&gt;query-&gt;setParam('max-results', '0');
    $this-&gt;query-&gt;setParam('start-index', '1');

    //get back entryless feed
    $feed = $this-&gt;gdClient-&gt;getFeed($this-&gt;query);
    return $feed-&gt;totalResults-&gt;text;
}
</code></pre>

<pre><code data-language="XML">&lt;ns0:feed xmlns:ns0="http://www.w3.org/2005/Atom"&gt;
&lt;ns1:totalresults xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;5&lt;/ns1:totalresults&gt;
&lt;ns1:itemsperpage xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;0&lt;/ns1:itemsperpage&gt;
&lt;ns1:startindex xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:startindex&gt;
&lt;ns0:generator uri="http://www.blogger.com" version="7.00"&gt;Blogger&lt;/ns0:generator&gt;
&lt;ns0:author&gt;&lt;ns0:name&gt;Tim&lt;/ns0:name&gt;&lt;/ns0:author&gt;
&lt;ns0:id&gt;tag:blogger.com,1999:blog-413573351281770670&lt;/ns0:id&gt;
&lt;ns0:link href="http://gpowered.blogspot.com/" rel="alternate" type="text/html" /&gt;
&lt;ns0:link href="http://gpowered.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" /&gt;
&lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default?max-results=0" rel="self" type="application/atom+xml" /&gt;
&lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default" rel="http://schemas.google.com/g/2005#post" type="application/atom+xml" /&gt;
&lt;ns0:title type="text"&gt;gPowered&lt;/ns0:title&gt;
&lt;ns0:updated&gt;2007-07-18T10:55:06.728-05:00&lt;/ns0:updated&gt;
&lt;/ns0:feed&gt;
</code></pre>

<p>So we get the total number of posts and then we can start pulling data. Lets
make a generic function, PostFrom, that can be used to show multiple posts, or
just single ones, depending on what you pass to it. The start number that is
passed to PostFrom has been set to the first post in the blog is considered to
have an id of 1 and the latest post is the same as total_posts. This is useful
so if viewers want to bookmark the page they are looking at, the post that is
being displayed will not change. The following are the different functions
that will make use of it.</p>

<pre><code data-language="PHP">//show latest posts
public function Posts(){
    return $this-&gt;ListPosts($this-&gt;total_posts);
}

//show posts starting from a certain point
public function ListPosts($start){
    $start = $this-&gt;total_posts - $start + 1;
    return $this-&gt;PostFrom($start, $this-&gt;show_num);
}

//show a single post
public function Post($start){
    $start = $this-&gt;total_posts - $start + 1;
    return PostFrom($start, 1);
}

//show count number of posts starting from a certain point
private function PostFrom($start, $count){
    //query for count number of posts starting at the given post
    $this-&gt;query-&gt;setParam('max-results', $count);
    $this-&gt;query-&gt;setParam('start-index', $start);
    $feed = $this-&gt;gdClient-&gt;getFeed($this-&gt;query);
</code></pre>

<p>Now we have all the data we need in the feed variable. Its been turned into an
object so we don't have to worry about XML parsing here. Every node has become
an objects and lists. Objects for single nodes(title), and lists for where
there are multiple nodes of the same name (entry, link)</p>

<pre><code data-language="PHP">//for links
$curr_id = $this-&gt;total_posts - $start + 1;

//normalize data for output
foreach($feed-&gt;entries as $entry){
    //id for links
    $entry-&gt;my_id = $curr_id;
    $curr_id -= 1;
}
</code></pre>

<p>Of course we're going to need next and previous buttons as well. The way we've
set up the math with total_posts and the start number, we only have to
increment or decrement these by count (the number of posts to display on a
page). I also set part of the link, as well as the page title, that I will use
below in the HTML.</p>

<pre><code data-language="PHP">$prev = $this-&gt;total_posts - ($start - $count) + 1;
if($prev &gt; $total_posts){
    $prev = null;
}


$next = $this-&gt;total_posts - ($start + $count) + 1;
if($next &lt; 1){
    $next = null;
}

//showing single post
if(count == 1){
    $link = 'post';
    $title = $feed-&gt;entries[0]-&gt;title-&gt;text;
    //listing posts
}
else{
    $link = 'posts';
    $title = 'home';
}
</code></pre>

<p>The final part is to make a quick object that we can use in the HTML to output
everything</p>

<pre><code data-language="PHP">        $this-&gt;output = new Output($feed-&gt;entries, $title, $prev, $next, $link);
    }
}

class Output{
    public $entries;
    public $title;
    public $prev;
    public $next;
    public $link;
    public function __construct($entries, $title, $prev, $next, $link){
        $this-&gt;entries=$entries;
        $this-&gt;title=$title;
        $this-&gt;prev=$prev;
        $this-&gt;next=$next;
        $this-&gt;link=$link;
    }
}
</code></pre>

<p>To the HTML!</p>

<p>The first part consists of displaying the post itself, along with its relevant
information. So lets built up our objects</p>

<pre><code data-language="PHP">$blog = new gPoweredBlogger('timothy.broder', '*************', '413573351281770670');
$blog-&gt;Posts();

$output = $blog-&gt;output;
</code></pre>

<p>Below all the php we can run through out output object and display the posts</p>

<pre><code data-language="HTML">&lt;? foreach($output-&gt;entries as $entry){ ?&gt;
     &lt;h2&gt;&lt;a href="/post/&lt;? echo $entry-&gt;my_id ?&gt;"&gt;&lt;? echo $entry-&gt;title-&gt;text ?&gt;&lt;/h2&gt;&lt;/a&gt;
     &lt;? echo $entry-&gt;content-&gt;text;
     $datetime = strtotime(substr($entry-&gt;published, 0, 10) . ' ' . substr($entry-&gt;published, 11, 8 ));
     ?&gt;
     &lt;p&gt;Posted by &lt;? echo $entry-&gt;author[0]-&gt;name-&gt;text ?&gt; on &lt;? echo date("m/d/Y",$datetime) ?&gt; at &lt;? echo date("g:i a",$datetime) ?&gt;&lt;/p&gt;

      &lt;div id="divider"&gt;&lt;/div&gt;
      &lt;?}?&gt;
</code></pre>

<p>That's all for now. A working example is
<a href="http://gpowered.net/php/blogger.php">here</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[First Google Gadget]]></title>
            <link href="https://www.timbroder.com/2007/08/google-code-updates-google-developer.html"/>
            <updated>2007-08-04T22:48:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/google-code-updates-google-developer.html</id>
            <content type="html"><![CDATA[<p>After being inspired about Google Gadgets from the <a href="http://google-code-updates.blogspot.com/2007/07/google-developer-podcast-episode-five.html">Google Developer
Podcast</a> I came up with one that my old <a href="http://www.rpicrew.com">crew
team</a> can use. We have a shared google calendar that
some of us use to keep track of races, meetings, etc. This gadget pulls and
formats it nicely for the google IG or desktop.</p>

<p><a href="http://fusion.google.com/add?moduleurl=http%3A//hosting.gmodules.com/ig/gadgets/file/109141966999504040851/RPICrewSchedule.xml"><img src="http://buttons.googlesyndication.com/fusion/add.gif" alt="Add to Google" /></a></p>

<p>Javascript code for the gadget:</p>

<pre><code>```html
&lt;style type="text/css"&gt;
div.exp{
    padding: 0;
    margin: 0;
}
div.loc{
    margin-left: 19px;
}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
&lt;!--
/**
* Season info *
* 0 Fall: Aug 26 - Nov 1
* 1 Winter Training: Nov 2 - March 1
* 2 Spring: March 2 - May 25
* 3 Summer: May 26 - Aug 25
**/

/**
* Callback function for the GData json-in-script call
* Inserts the supplied list of events into a div of a pre-defined name
*
* @param {json} root is the JSON-formatted content from GData
*/
function processRaces(root) {
displayRaces(root.feed, 'races');
}

//meow
function displayRaces(feed, divId){
var now = new Date();
var season = getSeason(now);
var events = document.getElementById(divId);

//clear "Loading..."
if (events.childNodes.length &gt; 0){
events.removeChild(events.childNodes[0]);
}

//display season
var d = document.createElement('div');
d.appendChild(document.createTextNode(getSeasonText(season)));
events.appendChild(d);

//loop races
for (var i=0; i&lt;feed.entry.length; i++){
var entry = feed.entry[i];

var d = getDate(entry['gd$when'][0].startTime);
if(isCurrSeason(now, d)){
var title = entry.title.$t;
var desc = entry.content.$t;

//set up image and clicking to expand
var div = document.createElement('div');
div.className = 'exp';
var toggle = document.createElement('img');
toggle.src= 'http://timothy.broder.googlepages.com/p.jpg';
toggle.align = 'absmiddle';
toggle.id = i;
toggle.onclick = function() {toggleDiv(this); }
div.appendChild(toggle);
div.appendChild(document.createTextNode(' ' + d.getMonth() + "/" + d.getDay() + ' - '));

// get the href to link to the event
for(var j=0; j&lt;entry['link'].length; j++){
if (entry['link'][j]['type'] == 'text/html' &amp;&amp; entry['link'][j]['rel'] == 'alternate'){
var href = entry['link'][j]['href'];
}
}

//we can link to the cal
if (typeof href != 'undefined'){
var link = document.createElement('a');
link.href = href;
link.target = '_blank';
link.appendChild(document.createTextNode(title));
div.appendChild(link);
}
else{ //shouldn't get here but just in case
div.appendChild(document.createTextNode(title));
}

div.appendChild(document.createElement('br'));

events.appendChild(div);

var where = entry['gd$where'][0].valueString;
var tDiv = document.createElement('div'); //div that will be hidden initially
tDiv.id ='id' + i;
tDiv.style['display'] = 'none';
tDiv.className = 'loc';
events.appendChild(tDiv);

if(desc != null &amp;&amp; desc != ""){ //we have a desc (should be the teams we're competing against)
var dDiv = document.createElement('span');
dDiv.appendChild(document.createTextNode(desc + " "));
tDiv.appendChild(dDiv);
}
//the location field is populated (hidden at start)
if(where != null &amp;&amp; where != ""){ //we have a location
var it = document.createElement('i');
var map = document.createElement('a');
map.target = '_blank';
//link to location on google maps
map.href = 'http://maps.google.com/maps?f=q&amp;hl;=en&amp;&amp;q;=' + spaceLink(entry['gd$where'][0].valueString);
map.appendChild(document.createTextNode(entry['gd$where'][0].valueString));
it.appendChild(document.createTextNode(" ("));
it.appendChild(map);
it.appendChild(document.createTextNode(")"));
tDiv.appendChild(it);
}
}
}
}

//format the date a little
function getDate(when){
var data = when.split("-");
return new Date(data[0], data[1], data[2]);
}

//return int representation of season
function getSeason(d){
var month = d.getMonth();
var day = d.getDate();
var year = d.getFullYear();

var aug = new Date(year, 8, 25);
var nov = new Date(year, 11, 1);
var mar = new Date(year, 3, 1);
var may = new Date(year, 5, 25);

if(aug &lt; d &amp;&amp; d &lt;= nov) return 0; //fall
else if(mar &lt; d &amp;&amp; d &lt;= may) return 2; //spring
else if(may &lt; d &amp;&amp; d &lt;= aug) return 3; //summer
else return 1; //winter
}

//figure out the current season
function isCurrSeason(now, d){
currSeason = getSeason(now);
season = getSeason(d);

if(currSeason == season){ //same season yes
if(now.getFullYear() == d.getFullYear()){ //same year also, match
return true;
}
if(season == 1 &amp;&amp; (d.getFullYear() == now.getFullYear()-1)){ //diff year, prob winter
return true;
}
}
return false;
}

//return text for season
function getSeasonText(season){
if(season == 0) return "Fall Season";
if(season == 1) return "Winter Training";
if(season == 2) return "Spring Season";
if(season == 3) return "Summer Season";

return "no season"; //really shouldn't get here
}

//if the div is hidden show it, if not, hide it
function toggleDiv(where_id){
var div = document.getElementById('id' + where_id.id);
var img = document.getElementById(where_id.id);
if(div != null){
if(div.style.display != 'none'){
div.style.display = 'none';
img.src= 'http://timothy.broder.googlepages.com/p.jpg';

}
else{
div.style.display = 'block';
img.src= 'http://timothy.broder.googlepages.com/m.jpg';
}
}
}

//convert the location so it can be used in a link to google maps
function spaceLink(name){
return name.replace(' ', ',+');
}

//--&gt;
&lt;/script&gt;

&lt;div id="races"&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="http://www.google.com/calendar/feeds/rpicrew@gmail.com/public/full?alt=json-in-script&amp;callback;=processRaces&amp;orderby;=starttime&amp;singleevents;=true&amp;sortorder;=ascending&amp;start-min;=2007-01-01T00:00:00"&gt;&lt;/script&gt;
</code></pre>

<p>```</p>

<p>And the XML for the gadget</p>

<p>``` 
    <?xml version="1.0" encoding="UTF-8"?>
    <Module>
    <ModulePrefs title="RPI Crew Schedule"
    title_url="http://gpowered.net"
    author="Tim Broder"
    height="150"
    width="250"
    author_email="timothy.broder@gmail.com"
    thumbnail="http://timothy.broder.googlepages.com/RPICrewScheduleThumb.jpg"
    description="RPI Crew Race Schedule, links to the RPICrew shared google calendar"
    author_photo="http://timothy.broder.googlepages.com/timothybrodersimpsons.png"
    author_location="NYC"
    author_affiliation="gPowered"
    author_link="http://www.gpowered.net"
    screenshot="http://timothy.broder.googlepages.com/RPICrewScheduleScreen.jpg"
    >
    <Require feature="dynamic-height"/>
    <Require feature="analytics"/>
    </ModulePrefs>
    <Content type="html">&lt;![CDATA[</p>

<pre><code>&lt;script&gt;
// Track this gadget using Google Analytics.
_IG_Analytics("UA-793489-6", "/RPICrewScheduleG");
&lt;/script&gt;
&lt;style type="text/css"&gt;
div.exp{
padding: 0;
margin: 0;
}
div.loc{
margin-left: 19px;
}
&lt;/style&gt;
&lt;script type="text/javascript"&gt;
&lt;!--
/**
* Season info *
* 0 Fall: Aug 26 - Nov 1
* 1 Winter Training: Nov 2 - March 1
* 2 Spring: March 2 - May 25
* 3 Summer: May 26 - Aug 25
**/

/**
* Callback function for the GData json-in-script call
* Inserts the supplied list of events into a div of a pre-defined name
*
* @param {json} root is the JSON-formatted content from GData
*/
function processRaces(root) {
displayRaces(root.feed, 'races');
}

//meow
function displayRaces(feed, divId){
var now = new Date();
var season = getSeason(now);
var events = document.getElementById(divId);

//clear "Loading..."
if (events.childNodes.length &gt; 0){
events.removeChild(events.childNodes[0]);
}

//display season
var d = document.createElement('div');
d.appendChild(document.createTextNode(getSeasonText(season)));
events.appendChild(d);

//loop races
for (var i=0; i&lt;feed.entry.length; i++){
var entry = feed.entry[i];

var d = getDate(entry['gd$when'][0].startTime);
if(isCurrSeason(now, d)){
var title = entry.title.$t;
var desc = entry.content.$t;

//set up image and clicking to expand
var div = document.createElement('div');
div.className = 'exp';
var toggle = document.createElement('img');
toggle.src= 'http://timothy.broder.googlepages.com/p.jpg';
toggle.align = 'absmiddle';
toggle.id = i;
toggle.onclick = function() {toggleDiv(this); }
div.appendChild(toggle);
div.appendChild(document.createTextNode(' ' + d.getMonth() + "/" + d.getDay() + ' - '));

// get the href to link to the event
for(var j=0; j&lt;entry['link'].length; j++){
if (entry['link'][j]['type'] == 'text/html' &amp;&amp; entry['link'][j]['rel'] == 'alternate'){
var href = entry['link'][j]['href'];
}
}

//we can link to the cal
if (typeof href != 'undefined'){
var link = document.createElement('a');
link.href = href;
link.target = '_blank';
link.appendChild(document.createTextNode(title));
div.appendChild(link);
}
else{ //shouldn't get here but just in case
div.appendChild(document.createTextNode(title));
}

div.appendChild(document.createElement('br'));

events.appendChild(div);

var where = entry['gd$where'][0].valueString;
var tDiv = document.createElement('div'); //div that will be hidden initially
tDiv.id ='id' + i;
tDiv.style['display'] = 'none';
tDiv.className = 'loc';
events.appendChild(tDiv);

if(desc != null &amp;&amp; desc != ""){ //we have a desc (should be the teams we're competing against)
var dDiv = document.createElement('span');
dDiv.appendChild(document.createTextNode(desc + " "));
tDiv.appendChild(dDiv);
}
//the location field is populated (hidden at start)
if(where != null &amp;&amp; where != ""){ //we have a location
var it = document.createElement('i');
var map = document.createElement('a');
map.target = '_blank';
//link to location on google maps
map.href = 'http://maps.google.com/maps?f=q&amp;hl;=en&amp;&amp;q;=' + spaceLink(entry['gd$where'][0].valueString);
map.appendChild(document.createTextNode(entry['gd$where'][0].valueString));
it.appendChild(document.createTextNode(" ("));
it.appendChild(map);
it.appendChild(document.createTextNode(")"));
tDiv.appendChild(it);
}
}
}
}

//format the date a little
function getDate(when){
var data = when.split("-");
return new Date(data[0], data[1], data[2]);
}

//return int representation of season
function getSeason(d){
var month = d.getMonth();
var day = d.getDate();
var year = d.getFullYear();

var aug = new Date(year, 8, 25);
var nov = new Date(year, 11, 1);
var mar = new Date(year, 3, 1);
var may = new Date(year, 5, 25);

if(aug &lt; d &amp;&amp; d &lt;= nov) return 0; //fall
else if(mar &lt; d &amp;&amp; d &lt;= may) return 2; //spring
else if(may &lt; d &amp;&amp; d &lt;= aug) return 3; //summer
else return 1; //winter
}

//figure out the current season
function isCurrSeason(now, d){
currSeason = getSeason(now);
season = getSeason(d);

if(currSeason == season){ //same season yes
if(now.getFullYear() == d.getFullYear()){ //same year also, match
return true;
}
if(season == 1 &amp;&amp; (d.getFullYear() == now.getFullYear()-1)){ //diff year, prob winter
return true;
}
}
return false;
}

//return text for season
function getSeasonText(season){
if(season == 0) return "Fall Season";
if(season == 1) return "Winter Training";
if(season == 2) return "Spring Season";
if(season == 3) return "Summer Season";

return "no season"; //really shouldn't get here
}

//if the div is hidden show it, if not, hide it
function toggleDiv(where_id){
var div = document.getElementById('id' + where_id.id);
var img = document.getElementById(where_id.id);
if(div != null){
if(div.style.display != 'none'){
div.style.display = 'none';
img.src= 'http://timothy.broder.googlepages.com/p.jpg';

}
else{
div.style.display = 'block';
img.src= 'http://timothy.broder.googlepages.com/m.jpg';
}
}
}

//convert the location so it can be used in a link to google maps
function spaceLink(name){
return name.replace(' ', ',+');
}

//--&gt;
&lt;/script&gt;

&lt;div id="races"&gt;&lt;p&gt;Loading...&lt;/p&gt;&lt;/div&gt;
&lt;script type="text/javascript" src="http://www.google.com/calendar/feeds/rpicrew@gmail.com/public/full?alt=json-in-script&amp;callback;=processRaces&amp;orderby;=starttime&amp;singleevents;=true&amp;sortorder;=ascending&amp;start-min;=2007-01-01T00:00:00"&gt;&lt;/script&gt;




]]&gt;&lt;/Content&gt;
&lt;/Module&gt;
```
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[New Calendar API features]]></title>
            <link href="https://www.timbroder.com/2007/08/new-calendar-api-features.html"/>
            <updated>2007-08-03T02:45:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/new-calendar-api-features.html</id>
            <content type="html"><![CDATA[<p><a href="http://googledataapis.blogspot.com/2007/07/create-calendars-with-google-calendar.html">Google Calendar API</a> posts new read and write features. They
have added:</p>

<ul>
<li><a href="http://code.google.com/apis/calendar/developers_guide_protocol.html#ManagingCalendars">owncalendars</a>: contains the collection of calendars that a user 'owns'  </li>
<li><a href="http://code.google.com/apis/calendar/developers_guide_protocol.html#ManagingSubscriptions">allcalendars</a>: contains all the calendars that a user has access to  </li>
</ul>

<p>Useful for listing all your calendars if you manage a lot of them, or
changing their settings all at once (both features have read and write
capabilities)</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Picasa Web Api updates]]></title>
            <link href="https://www.timbroder.com/2007/07/picasa-web-api-updates.html"/>
            <updated>2007-07-24T02:17:00+00:00</updated>
            <id>https://www.timbroder.com/2007/07/picasa-web-api-updates.html</id>
            <content type="html"><![CDATA[<p><a href="http://googledataapis.blogspot.com/2007/07/picasa-web-albums-adds-new-api-features.html">Google Data Api's</a> posted a few updates today, a few of which
I've really been looking forward to; Community Search, Retrieving a user's
recently uploaded photos, Retrieving recently added comments for a particular
user, Searching a user's photos, Filtering by tag, Uploading non-JPEG photos,
Downloading the original photo.</p>

<p>(my fav) <strong>Downloading the original photo</strong>: You can now download the original
photo, including all EXIF data. This is accomplished by retrieving the feed
with the <code>imgmax=d</code> query parameter and value This will return a feed where
the <code>media:content</code> elements reference the original downloadable image.</p>

<p>It's nice not having to use a <a href="http://groups.google.com/group/Google-Picasa-Data-API/browse_thread/thread/6311fb3da0673228/a165e494fe1c1d9d#a165e494fe1c1d9d">backdoor </a>
for this anymore</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Displaying Blogger feeds with Python]]></title>
            <link href="https://www.timbroder.com/2007/07/howto-get-blogger-feeds-using-python.html"/>
            <updated>2007-07-19T03:07:00+00:00</updated>
            <id>https://www.timbroder.com/2007/07/howto-get-blogger-feeds-using-python.html</id>
            <content type="html"><![CDATA[<p>This first HOWTO is going to cover how I did the basic structure of the posts section of gPowered: pulling from blogger. 
The main functions we'll need are to show a range of posts, a single post, and a function to get the total number of posts that are in the blog.
The reason I try to get the total number is so the different pages can be bookmarkable.  When retrieving a GData feed from blogger.  Entry 1 in the feed is going to be the newest post so there is no 'id' that is going to be static, so we'll do a little math to get a number we can later use as the id.
I use Django to handle rendering the python to the browser.  I probably won't get into other methods.</p>

<p>To start out you'll have to grab the following modules.</p>

<ul>
<li><p>the <a href="http://code.google.com/p/gdata-python-client/downloads/list">gdata python client</a></p></li>
<li><p><a href="http://effbot.org/zone/element-index.htm">ElementTree</a></p></li>
<li><p><a href="http://www.egenix.com/products/python/mxBase/mxDateTime/">mxDateTime</a> (I used this for date formatting)</p></li>
</ul>

<p>We then import the parts the we'll need (you can ignore the Django part for your own methods):</p>

<pre><code data-language="python">    from Django.shortcuts import render_to_response

    from gdata import service
    import gdata
    import atom
    import getopt
    import sys

    from mx import DateTime
</code></pre>

<p>One of the first things we're going to have to do is authenticate with google services.
There are two ways to do this: <a href="http://code.google.com/apis/blogger/developers_guide_python.html#auth_sub">AuthSub proxy authentication</a> which has a user login using their own credentials, and
 <a href="http://code.google.com/apis/blogger/developers_guide_python.html#client_login"> ClientLogin username/password authentication</a> where you send a username and password.  We will be using ClientLogin.
 First off, set your login credentials to use later.</p>

<pre><code data-language="python">    #login info
    user = 'timothy.broder@gmail.com'
    password = '********'
</code></pre>

<p>Then we start setting up our call to the service.</p>

<pre><code data-language="python">    #set up service
    blogger_service = service.GDataService(user, password)
    blogger_service.source = 'gpowered'
    blogger_service.service = 'blogger'
    blogger_service.server = 'www.blogger.com'
    blogger_service.ProgrammaticLogin()
</code></pre>

<p>For more info see the <a href="http://code.google.com/apis/blogger/developers_guide_python.html">blogger developer's guide with python</a> or the <a href="http://code.google.com/apis/accounts/Authentication.html">Google Account Authentication documentation</a></p>

<p>After we have authenticated with Google we need to start building up our query to <a href="http://code.google.com/apis/gdata/">GData</a>, which will return as an ElementTree of data.  The first thing you'll need is your blog's id.</p>

<p>You can use the function in the dev guide to help you with this if you don't already know it.</p>

<pre><code data-language="python">    def PrintUserBlogTitles(blogger_service):
      query = service.Query()
      query.feed = '/feeds/default/blogs'
      feed = blogger_service.Get(query.ToUri())

      print feed.title.text
      for entry in feed.entry:
        print "\t" + entry.title.text
</code></pre>

<p>After you have the blog id we can start working on the query</p>

<pre><code data-language="python">    blog_id = 413573351281770670
    feed_url = '/feeds/%s/posts/default' % str(blog_id)
    query = service.Query()
    query.feed = feed_url
</code></pre>

<p>The below function returns the total number of posts that are in the feed.  We can get a small response by sending 0 for the max results.  Below is the function and the small response we get from it.</p>

<pre><code data-language="python">    #get the total number of posts for this feed
    def get_total(query):
     #query for no posts
     query.max_results = '0'
     query.start_index = '1'

     #get back entryless feed
     feed = blogger_service.Get(query.ToUri()) 
     return int(feed.total_results.text)
</code></pre>

<pre><code data-language="xml">    &lt;ns0:feed xmlns:ns0="http://www.w3.org/2005/Atom"&gt;
     &lt;ns1:totalresults xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:totalresults&gt;
     &lt;ns1:itemsperpage xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;0&lt;/ns1:itemsperpage&gt;
     &lt;ns1:startindex xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:startindex&gt;
     &lt;ns0:generator version="7.00" uri="http://www.blogger.com"&gt;Blogger&lt;/ns0:generator&gt;
     &lt;ns0:author&gt;&lt;ns0:name&gt;Tim&lt;/ns0:name&gt;&lt;/ns0:author&gt;
     &lt;ns0:id&gt;tag:blogger.com,1999:blog-413573351281770670&lt;/ns0:id&gt;
     &lt;ns0:link href="http://gpowered.blogspot.com/" type="text/html" rel="alternate"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://gpowered.blogspot.com/feeds/posts/default" type="application/atom+xml" rel="http://schemas.google.com/g/2005#feed"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default?max-results=0" type="application/atom+xml" rel="self"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default" type="application/atom+xml" rel="http://schemas.google.com/g/2005#post"&gt;&lt;/ns0:link&gt;
     &lt;ns0:title type="text"&gt;gPowered&lt;/ns0:title&gt;
     &lt;ns0:updated&gt;2007-07-18T10:55:06.728-05:00&lt;/ns0:updated&gt;
    &lt;/ns0:feed&gt;
</code></pre>

<p>So we get the total number of posts and then we can start pulling data.  Lets make a generic function, PostFrom, that can be used to show multiple posts, or just single ones, depending on what you pass to it.  The start number that is passed to PostFrom has been set to the first post in the blog is considered to have an id of 1 and the latest post is the same as total_posts.  This is useful so if viewers want to bookmark the page they are looking at, the post that is being displayed will not change.
The following are the different functions that will make use of it.</p>

<pre><code data-language="python">    #show latest posts
    def Posts(request):
     return ListPosts(request, total_posts)

    #show posts starting from a certain point 
    def ListPosts(request, start):
     start = total_posts - int(start) + 1
     return PostFrom(request, start, show_num)

    #show a single post
    def Post(request, start):
     start = total_posts - int(start) + 1
     return PostFrom(request, start, 1)

    def PostFrom(request, start, count):
     #query for count number of posts starting at the given post
     query.max_results = str(count)
     query.start_index = str(start)
     feed = blogger_service.Get(query.ToUri())
</code></pre>

<p>Now we have all the data we need in the feed variable.  Its been turned into an element tree so we don't have to worry about XML parsing here.  Every node has become an objects and lists.  Objects for single nodes(title), and lists for where there are multiple nodes of the same name (entry, link)
At this stage I play with the data a little so it's easier to use in my Django template.</p>

<pre><code data-language="python">     #normalize data for output
     for entry in feed.entry:
      #get link for template
      entry.my_link = entry.link[0].href

      #id for links
      entry.my_id = curr_id
      curr_id -= 1

      #format published date
      dt = DateTime.ISO.ParseDateTimeUTC(entry.published.text)
      entry.my_date = dt.strftime('%m/%d/%Y')
      entry.my_time = dt.strftime('%I:%M %p') 
</code></pre>

<p>Of course we're going to need next and previous buttons as well.  The way we've set up the math with total_posts and the start number, we only have to increment or decrement these by count (the number of posts to display on a page).  I also set part of the link, as well as the page title, that I will use in my template.</p>

<pre><code data-language="python">     prev = total_posts - (start - count) + 1
     if prev &gt; total_posts:
      prev = None


     next = total_posts - (start + count) + 1
     if next &lt; 1:
      next = None

     #showing single post 
     if count == 1:
      link = 'post'
      title = feed.entry[0].title.text
     #listing posts
     else:
      link = 'posts'
      title = 'home'
</code></pre>

<p>The final part of the function is a return to the Django framework to populate my template.  I'm going to get into the template more in the next post, but you now have all the information you need stored.</p>

<pre><code data-language="python">     return render_to_response('posts/index.html', {
      'entries': feed.entry,
      'title': title,
      'tag_link': tag_link, 
      'prev': prev,
      'next': next,  
      'link': link,
      'tab_home': True,
      })
</code></pre>

<p>To the template!</p>

<p>The first part consists of displaying the post itself, along with its relevant information</p>

<pre><code data-language="html">    
{% for entry in entries %}

      &lt;h2&gt;&lt;a href="/post/{{ entry.my_id }}"&gt;{{ entry.title.text }}&lt;/h2&gt;&lt;/a&gt;
      {{ entry.content.text }}
      &lt;p&gt;Posted by {% for auth in entry.author %}{{ auth.name.text }}{% if not forloop.last %}, {% endif %}{% endfor %} 
      on {{ entry.my_date }} at {{ entry.my_time }}&lt;/p&gt;
      {% if entry.category %}&lt;p&gt;Labels: {% for cat in entry.category %}
       &lt;a href="{{ tag_link }}{{ cat.term }}"&gt;{{ cat.term }}&lt;/a&gt;
       {% if not forloop.last %}, {% endif %}
       {% endfor %}&lt;/p&gt;{% endif %}&lt;p&gt;&lt;a href="{{ entry.my_link }}"&gt;More...&lt;/a&gt;&lt;/p&gt;

    {% endfor %}
    
</code></pre>

<p>And the second part handles the prev and next links</p>

<pre><code data-language="html">    
    &lt;br&gt;&lt;/br&gt;
    &lt;div class="nav"&gt;
    {% if prev %}
    &lt;a href="/{{ link }}/{{ prev }}"&gt;prev&lt;/a&gt;
    {% else %}

    {% endif %}

    {% if next %}
    &lt;a href="/{{ link }}/{{ next }}"&gt;next&lt;/a&gt;
    {% else %}

    {% endif %}
    &lt;/div&gt;
    {% include 'bottom.html' %}
    
</code></pre>

<p>That's all for now. A working example is the <a href="http://gpowered.net/g/">gPowered.net</a> site I'm putting up.  All posts on there are getting pulled from this blog.  I'm going to get into tags and comments next time, as well as javascript and php versions. Stay tuned!</p>
]]></content>
        </entry>
    </feed>