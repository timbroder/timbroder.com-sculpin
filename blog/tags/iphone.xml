<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/iphone.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Animate an AdWhirlView from the Bottom of the Screen]]></title>
            <link href="https://www.timbroder.com/2012/08/animate-adwhirl-bottom.html"/>
            <updated>2012-08-18T00:50:47+00:00</updated>
            <id>https://www.timbroder.com/2012/08/animate-adwhirl-bottom.html</id>
            <content type="html"><![CDATA[<p>If you are using <a href="https://www.adwhirl.com/">AdWhirl</a> and want the ad to slide
in from the bottom of the screen when your View loads, use this snippet:</p>

<pre><code data-language="c">- (void)viewDidLoad
{
    [super viewDidLoad];
    AdWhirlView *adWhirlView = [AdWhirlView requestAdWhirlViewWithDelegate:self];
    adWhirlView.delegate = self;
    adWhirlView.frame = CGRectMake(0, 430+kAdWhirlViewHeight, kAdWhirlViewWidth, kAdWhirlViewHeight);
    [self.parentViewController.view insertSubview:adWhirlView belowSubview:self.view];

    [UIView beginAnimations:@&amp;quot;AdWhirlIn&amp;quot; context:nil];
    [UIView setAnimationDuration:.5];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    adWhirlView.frame = CGRectMake(0, 430, kAdWhirlViewWidth, kAdWhirlViewHeight);
    [UIView commitAnimations];
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Adding Done and Cancel buttons to an iOS number pad]]></title>
            <link href="https://www.timbroder.com/2012/08/adding-done-and-cancel-buttons-to-an-ios-number-pad.html"/>
            <updated>2012-08-17T15:49:55+00:00</updated>
            <id>https://www.timbroder.com/2012/08/adding-done-and-cancel-buttons-to-an-ios-number-pad.html</id>
            <content type="html"><![CDATA[<p>There are some cases when you may want to have a "Done" or "Cancel" button on
an iOs number pad when editing a text field. This doesn't come by default, but
is easy to add. See the example snippets below, or check out the code on
<a href="https://github.com/broderboy/iphone-DoneCancelNumberPadToolbar">github</a>.</p>

<p><a href="/images/2012/08/Done-Cancel-Iphone.png"><img src="/images/2012/08/Done-Cancel-Iphone.png" alt="" /></a></p>

<p>Sample Usage:</p>

<pre><code data-language="c">//In the view controller that's going ot use the component, put this in the header after the class being extended.
&lt;DoneCancelNumberPadToolbarDelegate&gt;

// Then instantiate your toolbar component where it's needed
DoneCancelNumberPadToolbar *toolbar = [[DoneCancelNumberPadToolbar alloc] initWithTextField:textField];
toolbar.delegate = self;
textField.inputAccessoryView = toolbar;

// Finally, implement the following two delegate methods

#pragma mark - DoneCancelNumberpadToolbar delegate
-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickDone:(UITextField *)textField
{
    NSLog(@&amp;quot;%@&amp;quot;, textField.text);
}

-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickCancel:(UITextField *)textField
{
    NSLog(@&amp;quot;Canceled: %@&amp;quot;, [textField description]);
}
</code></pre>

<p>DoneCancelNumberPadToolbar.h</p>

<pre><code>#import &lt;UIKit/UIKit.h&gt;

@class DoneCancelNumberPadToolbar;

@protocol DoneCancelNumberPadToolbarDelegate &lt;NSObject&gt;

-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickDone:(UITextField *)textField;
-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickCancel:(UITextField *)textField;

@end

@interface DoneCancelNumberPadToolbar : UIToolbar
{
    UITextField* textField;
}
</code></pre>

<p>DoneCancelNumberPadToolbar.m</p>

<pre><code data-language="c">#import &amp;quot;DoneCancelNumberPadToolbar.h&amp;quot;

@implementation DoneCancelNumberPadToolbar

@synthesize delegate;

- (id) initWithTextField:(UITextField *)aTextField
{
    self = [super initWithFrame:CGRectMake(0, 0, 320, 50)];
    if (self) {
        textField = aTextField;
        self.barStyle = UIBarStyleBlackTranslucent;
        self.items = [NSArray arrayWithObjects:
                      [[UIBarButtonItem alloc]initWithTitle:@&amp;quot;Cancel&amp;quot;
                                                      style:UIBarButtonItemStyleBordered
                                                     target:self
                                                     action:@selector(cancelNumberPad)],
                      [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                                   target:nil action:nil],
                      [[UIBarButtonItem alloc]initWithTitle:@&amp;quot;Done&amp;quot;
                                                      style:UIBarButtonItemStyleDone
                                                     target:self
                                                     action:@selector(doneWithNumberPad)],
                      nil];
        [self sizeToFit];

    }
    return self;
}

-(void)cancelNumberPad
{
    [textField resignFirstResponder];
    textField.text = @&amp;quot;&amp;quot;;
    [self.delegate doneCancelNumberPadToolbarDelegate:self didClickCancel:textField];
}

-(void)doneWithNumberPad
{
    [textField resignFirstResponder];
    [self.delegate doneCancelNumberPadToolbarDelegate:self didClickDone:textField];
}
@end

@property (nonatomic, weak) id &lt;DoneCancelNumberPadToolbarDelegate&gt; delegate;

- (id) initWithTextField:(UITextField *)textField;

@end
</code></pre>

<p>Special thanks to [akozl
ik](http://www.reddit.com/r/iOSProgramming/comments/ydrzv/adding_done_and_canc
el_buttons_to_an_ios_number/c5v4rpt) for the help with delegates.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[iOS Game Engines]]></title>
            <link href="https://www.timbroder.com/2012/07/ios-game-engines.html"/>
            <updated>2012-07-30T20:06:21+00:00</updated>
            <id>https://www.timbroder.com/2012/07/ios-game-engines.html</id>
            <content type="html"><![CDATA[<p>After playing Rovio's new <a href="http://teaser.amazingalex.com/">Amazing Alex</a> game
for a while, and seeing <a href="http://www.bgr.com/2012/07/30/amazing-alex-sales-app-store/">this article</a> on BGR this morning, it made me remember some old
success stories that I had read about, and I got to thinking about what it
would take to develop a <a href="http://sv.partypoker.com/">game</a> for iOS. More just
to see what options were out there than anything else; I know nothing about
game programming. Side note: Amazing Alex is great. If you have ever played
the incredible machine, you'll feel right at home.</p>

<p>One success story I remember is Ethan Nicholas and iShoot, which made him over $800k. Check out
how he did it, and how to get started with iOS here: <a href="http://www.lookingforiphone.com/2012/05/17/iphone-developer-in-eight-easy-steps/">iPhone developer in
eight easy steps</a>. If he can do it... why not? But, I digress.   ManiacDev
has great lists of both <a href="http://maniacdev.com/2009/08/the-open-source-iphone-game-engine-comparison/">Open Source</a> and <a href="http://maniacdev.com/2009/09/the-commercial-iphone-game-engine-comparison-3d-and-2d/">Commercial
</a>graphic engines for iOS. As far as free goes, <a href="http://www.cocos2d-iphone.org/">cocos2d</a> and <a href="http://gamua.com/sparrow/">sparrow</a> both jumped out
at me. Sparrow seemed like the fastest ramp-up time and after a quick look at
it's <a href="http://wiki.sparrow-framework.org/manual/display_objects">api</a>, felt
familiar. Without diving too much into the examples, it seems to follow
similar patterns to some of the python/js UI frameworks I've used.
Unfortunately, the <a href="http://forum.sparrow-framework.org/">forum</a> seems pretty
sparse. Cocos2d, while looking like a steeper learning curve, seems a little
more mature and a much more engaged community. It's forum has 85% more posts
than sparrow, which coming from a busy php/python community, I like to see. As
for commercial engines, after reading about how Infinity Blade was Epic's most
<a href="http://www.geek.com/articles/mobile/infinity-blade-is-epics-most-profitable-game-20120627/">profitable game ever</a>, and seeing that a license would only be
$99, the <a href="http://www.udk.com/">Unreal Development Kit For iOS</a> is totally the
way I would go.</p>

<p>[sponsored post]</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[iPhone4 vs HTC Evo]]></title>
            <link href="https://www.timbroder.com/2010/06/iphone4-vs-htc-evo.html"/>
            <updated>2010-06-28T17:24:17+00:00</updated>
            <id>https://www.timbroder.com/2010/06/iphone4-vs-htc-evo.html</id>
            <content type="html"><![CDATA[<p>Warning: cursing</p>

<p><a href="http://www.youtube.com/watch?v=FL7yD-0pqZg"><img src="http://img.youtube.com/vi/FL7yD-0pqZg/0.jpg" alt="" /></a></p>
]]></content>
        </entry>
    </feed>