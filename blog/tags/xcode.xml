<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/xcode.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Adding a Delete Line hotkey in Xcode]]></title>
            <link href="https://www.timbroder.com/2013/02/adding-a-delete-line-hotkey-in-xcode.html"/>
            <updated>2013-02-08T15:49:20+00:00</updated>
            <id>https://www.timbroder.com/2013/02/adding-a-delete-line-hotkey-in-xcode.html</id>
            <content type="html"><![CDATA[<p>When I switched from eclipse to sublime text 2, the first hotkey I moved over
was cmd+d to delete a line. I use it pretty heavily.Â  After using Xcode for a
few months it was driving me crazy that it didn't have delete line as an
option under hotkeys. Thanks to
<a href="http://stackoverflow.com/questions/5834096/how-do-i-create-a-delete-line-keyboard-shortcut-in-xcode-4-the-xcode-3-solution/12678985#12678985">stackoverflow</a> for the solve. To add a new custom key
binding, we have to edit the Key Binding plist file: (close Xcode)</p>

<pre><code data-language="c">sudo vi /Applications/Xcode.app/Contents/Frameworks/IDEKit.framework/Resources/IDETextKeyBindingSet.plist
</code></pre>

<p>Add this text just ABOVE the close of the <code>&lt;dict&gt;</code> at the bottom of this file:</p>

<pre><code data-language="XML">&lt;key&gt;Custom&lt;/key&gt;
    &lt;dict&gt;
      &lt;key&gt;Delete Current Line In One Hit&lt;/key&gt;
      &lt;string&gt;moveToEndOfLine:, deleteToBeginningOfLine:, deleteToEndOfParagraph:&lt;/string&gt;
    &lt;/dict&gt;
</code></pre>

<p>Note that:</p>

<ul>
<li>This is <em>inside</em> the existing <code>&lt;dict&gt;</code> so there is a <code>&lt;/dict&gt;&lt;/plist&gt;</code> after this</li>
<li>This associates the named action "Delete Current Line In One Hit" to the three key actions in the string. I played around with different options here to get the right combination. For instance, if you try moveToBeginningOfLine, deleteToEndOfLine instead of vice versa, then using it on empty lines will delete the line <em>and</em> the entire next line. Which is unpleasant
Save this and open XCode</li>
</ul>

<ol>
<li>Open XCode Preferences</li>
<li>Select Key Bindings</li>
<li>Click on All</li>
<li>In the SEarch box type "Delete" and search for "Delete Current Line in One Hit"</li>
<li>Add your new binding.
I use cmd+d, so I had to map duplicate to something else first</li>
</ol>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Animate an AdWhirlView from the Bottom of the Screen]]></title>
            <link href="https://www.timbroder.com/2012/08/animate-adwhirl-bottom.html"/>
            <updated>2012-08-18T00:50:47+00:00</updated>
            <id>https://www.timbroder.com/2012/08/animate-adwhirl-bottom.html</id>
            <content type="html"><![CDATA[<p>If you are using <a href="https://www.adwhirl.com/">AdWhirl</a> and want the ad to slide
in from the bottom of the screen when your View loads, use this snippet:</p>

<pre><code data-language="c">- (void)viewDidLoad
{
    [super viewDidLoad];
    AdWhirlView *adWhirlView = [AdWhirlView requestAdWhirlViewWithDelegate:self];
    adWhirlView.delegate = self;
    adWhirlView.frame = CGRectMake(0, 430+kAdWhirlViewHeight, kAdWhirlViewWidth, kAdWhirlViewHeight);
    [self.parentViewController.view insertSubview:adWhirlView belowSubview:self.view];

    [UIView beginAnimations:@&amp;quot;AdWhirlIn&amp;quot; context:nil];
    [UIView setAnimationDuration:.5];
    [UIView setAnimationCurve:UIViewAnimationCurveEaseInOut];
    adWhirlView.frame = CGRectMake(0, 430, kAdWhirlViewWidth, kAdWhirlViewHeight);
    [UIView commitAnimations];
}
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Adding Done and Cancel buttons to an iOS number pad]]></title>
            <link href="https://www.timbroder.com/2012/08/adding-done-and-cancel-buttons-to-an-ios-number-pad.html"/>
            <updated>2012-08-17T15:49:55+00:00</updated>
            <id>https://www.timbroder.com/2012/08/adding-done-and-cancel-buttons-to-an-ios-number-pad.html</id>
            <content type="html"><![CDATA[<p>There are some cases when you may want to have a "Done" or "Cancel" button on
an iOs number pad when editing a text field. This doesn't come by default, but
is easy to add. See the example snippets below, or check out the code on
<a href="https://github.com/broderboy/iphone-DoneCancelNumberPadToolbar">github</a>.</p>

<p><a href="/images/2012/08/Done-Cancel-Iphone.png"><img src="/images/2012/08/Done-Cancel-Iphone.png" alt="" /></a></p>

<p>Sample Usage:</p>

<pre><code data-language="c">//In the view controller that's going ot use the component, put this in the header after the class being extended.
&lt;DoneCancelNumberPadToolbarDelegate&gt;

// Then instantiate your toolbar component where it's needed
DoneCancelNumberPadToolbar *toolbar = [[DoneCancelNumberPadToolbar alloc] initWithTextField:textField];
toolbar.delegate = self;
textField.inputAccessoryView = toolbar;

// Finally, implement the following two delegate methods

#pragma mark - DoneCancelNumberpadToolbar delegate
-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickDone:(UITextField *)textField
{
    NSLog(@&amp;quot;%@&amp;quot;, textField.text);
}

-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickCancel:(UITextField *)textField
{
    NSLog(@&amp;quot;Canceled: %@&amp;quot;, [textField description]);
}
</code></pre>

<p>DoneCancelNumberPadToolbar.h</p>

<pre><code>#import &lt;UIKit/UIKit.h&gt;

@class DoneCancelNumberPadToolbar;

@protocol DoneCancelNumberPadToolbarDelegate &lt;NSObject&gt;

-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickDone:(UITextField *)textField;
-(void)doneCancelNumberPadToolbarDelegate:(DoneCancelNumberPadToolbar *)controller didClickCancel:(UITextField *)textField;

@end

@interface DoneCancelNumberPadToolbar : UIToolbar
{
    UITextField* textField;
}
</code></pre>

<p>DoneCancelNumberPadToolbar.m</p>

<pre><code data-language="c">#import &amp;quot;DoneCancelNumberPadToolbar.h&amp;quot;

@implementation DoneCancelNumberPadToolbar

@synthesize delegate;

- (id) initWithTextField:(UITextField *)aTextField
{
    self = [super initWithFrame:CGRectMake(0, 0, 320, 50)];
    if (self) {
        textField = aTextField;
        self.barStyle = UIBarStyleBlackTranslucent;
        self.items = [NSArray arrayWithObjects:
                      [[UIBarButtonItem alloc]initWithTitle:@&amp;quot;Cancel&amp;quot;
                                                      style:UIBarButtonItemStyleBordered
                                                     target:self
                                                     action:@selector(cancelNumberPad)],
                      [[UIBarButtonItem alloc]initWithBarButtonSystemItem:UIBarButtonSystemItemFlexibleSpace
                                                                   target:nil action:nil],
                      [[UIBarButtonItem alloc]initWithTitle:@&amp;quot;Done&amp;quot;
                                                      style:UIBarButtonItemStyleDone
                                                     target:self
                                                     action:@selector(doneWithNumberPad)],
                      nil];
        [self sizeToFit];

    }
    return self;
}

-(void)cancelNumberPad
{
    [textField resignFirstResponder];
    textField.text = @&amp;quot;&amp;quot;;
    [self.delegate doneCancelNumberPadToolbarDelegate:self didClickCancel:textField];
}

-(void)doneWithNumberPad
{
    [textField resignFirstResponder];
    [self.delegate doneCancelNumberPadToolbarDelegate:self didClickDone:textField];
}
@end

@property (nonatomic, weak) id &lt;DoneCancelNumberPadToolbarDelegate&gt; delegate;

- (id) initWithTextField:(UITextField *)textField;

@end
</code></pre>

<p>Special thanks to [akozl
ik](http://www.reddit.com/r/iOSProgramming/comments/ydrzv/adding_done_and_canc
el_buttons_to_an_ios_number/c5v4rpt) for the help with delegates.</p>
]]></content>
        </entry>
    </feed>