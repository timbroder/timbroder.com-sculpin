<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>
                        Category Archive &mdash; timbroder.com
            </title>
    <meta name="description" content="Category Archive" />

    <meta name="HandheldFriendly" content="True" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="alternate" type="application/rss+xml" title="timbroder.com &raquo; Feed" href="https://feeds.feedburner.com/timbroder" />
    
        <link rel="stylesheet" type="text/css" href="//fonts.googleapis.com/css?family=Merriweather:300,700,700italic,300italic|Open+Sans:700,400" />        <link href="https://www.timbroder.com/themes/broderboy/deadfish/assets/css/screen.css" rel="stylesheet" media="screen">
    <link href="https://www.timbroder.com/themes/broderboy/deadfish/assets/css/tag_cloud.css" rel="stylesheet" media="screen">
    <link href="https://www.timbroder.com/themes/broderboy/deadfish/assets/css/twilight.css" rel="stylesheet" media="screen">
        <script>
(function(a,b){function d(a,b){return a===null?b==="null":a===undefined?b==="undefined":a.is&&a instanceof f?b==="element":Object.prototype.toString.call(a).toLowerCase().indexOf(b)>7}function c(a){var b,e,f,g,h,i,l,m,n;if(a instanceof c)return a;d(a,"array")||(a=String(a).replace(/\s/g,"").toLowerCase().match(/(?:\+,|[^,])+/g));for(b=0,e=a.length;b<e;++b){d(a[b],"array")||(a[b]=String(a[b]).match(/(?:\+\/|[^\/])+/g)),i=[],f=a[b].length;while(f--){var l=a[b][f];h={jwertyCombo:String(l),shiftKey:!1,ctrlKey:!1,altKey:!1,metaKey:!1},d(l,"array")||(l=String(l).toLowerCase().match(/(?:(?:[^\+])+|\+\+|^\+$)/g)),g=l.length;while(g--)l[g]==="++"&&(l[g]="+"),l[g]in k.mods?h[j[k.mods[l[g]]]]=!0:l[g]in k.keys?h.keyCode=k.keys[l[g]]:m=l[g].match(/^\[([^-]+\-?[^-]*)-([^-]+\-?[^-]*)\]$/);if(d(h.keyCode,"undefined"))if(m&&m[1]in k.keys&&m[2]in k.keys){m[2]=k.keys[m[2]],m[1]=k.keys[m[1]];for(n=m[1];n<m[2];++n)i.push({altKey:h.altKey,shiftKey:h.shiftKey,metaKey:h.metaKey,ctrlKey:h.ctrlKey,keyCode:n,jwertyCombo:String(l)});h.keyCode=n}else h.keyCode=0;i.push(h)}this[b]=i}this.length=b;return this}var e=a.document,f=a.jQuery||a.Zepto||a.ender||e,g,h,i="keydown";f===e?(g=function(a,b){return a?f.querySelector(a,b||f):f},h=function(a,b){a.addEventListener(i,b,!1)},$f=function(a,b){var c=document.createEvent("Event"),d;c.initEvent(i,!0,!0);for(d in b)c[d]=b[d];return(a||f).dispatchEvent(c)}):(g=function(a,b,c){return f(a||e,b)},h=function(a,b){f(a).bind(i+".jwerty",b)},$f=function(a,b){f(a||e).trigger(f.Event(i,b))});var j={16:"shiftKey",17:"ctrlKey",18:"altKey",91:"metaKey"},k={mods:{".":16,shift:16,".":17,ctrl:17,".":18,alt:18,option:18,".":91,meta:91,cmd:91,"super":91,win:91},keys:{".":8,backspace:8,".":9,".":9,tab:9,".":13,"return":13,enter:13,".":13,pause:19,"pause-break":19,".":20,caps:20,"caps-lock":20,".":27,escape:27,esc:27,space:32,".":33,pgup:33,"page-up":33,".":34,pgdown:34,"page-down":34,".":35,end:35,".":36,home:36,ins:45,insert:45,del:45,"delete":45,".":37,left:37,"arrow-left":37,".":38,up:38,"arrow-up":38,".":39,right:39,"arrow-right":39,".":40,down:40,"arrow-down":40,"*":106,star:106,asterisk:106,multiply:106,"+":107,plus:107,"-":109,subtract:109,"=":187,equals:187,",":188,comma:188,".":190,period:190,"full-stop":190,"/":191,slash:191,"forward-slash":191,"`":192,tick:192,"back-quote":192,"[":219,"open-bracket":219,"\\":220,"back-slash":220,"]":221,"close-bracket":221,"'":222,quote:222,apostraphe:222}};l=95,n=0;while(++l<106)k.keys["num-"+n]=l,++n;l=47,n=0;while(++l<58)k.keys[n]=l,++n;l=111,n=1;while(++l<136)k.keys["f"+n]=l,++n;var l=64;while(++l<91)k.keys[String.fromCharCode(l).toLowerCase()]=l;var m=b.jwerty={event:function(a,b,e){if(d(b,"boolean")){var f=b;b=function(){return f}}a=new c(a);var g=0,h=a.length-1,i,j;return function(c){if(j=m.is(a,c,g)){if(g<h){++g;return}i=b.call(e||this,c,j),i===!1&&c.preventDefault(),g=0}else g=m.is(a,c)?1:0}},is:function(a,b,d){a=new c(a),d=d||0,a=a[d],b=b.originalEvent||b;var e,f=a.length,g=!1;while(f--){g=a[f].jwertyCombo;for(var h in a[f])h!=="jwertyCombo"&&b[h]!==a[f][h]&&(g=!1);if(g!==!1)return g}return g},key:function(b,c,e,f,i){var j=d(e,"element")||d(e,"string")?e:f,k=j===e?a:e,l=j===e?f:i;h(d(j,"element")?j:g(j,l),m.event(b,c,k))},fire:function(a,b,e,f){a=new c(a);var h=d(e,"number")?e:f;$f(d(b,"element")?b:g(b,e),a[h||0][0])},KEYS:k}})(this,typeof module!="undefined"&&module.exports?module.exports:this),jwerty.key("B,A",function(){_unicorns=document.createElement("SCRIPT"),_unicorns.type="text/javascript",_unicorns.src="http://snacksize.com/unicorn/unicorn.js?",document.getElementsByTagName("head")[0].appendChild(_unicorns)})
</script>
</head>
<body class="nav-closed">
                                        <div class="site-wrapper">
                        <header class="main-header">
        <div class="vertical">
        <div class="main-header-content inner">
            <h1 class="page-title">
                <a href="/">
                    timbroder.com
                </a>
            </h1>
                        <h2 class="page-description">
                <a href="/apps.html">Apps</a>
                <a href="/projects.html">Projects</a>
                <a href="/podcasts.html">Podcasts</a>
                <a href="/talks.html">Talks</a>
                            </h2>
        </div>
    </div>
    </header>                            
                    <main class="content" role="main">
            <article class="post" role="article">
        
<header class="post-header">
    <h1 class="post-title"><a href="https://medium.com/@mg/email-is-a-constant-why-i-turned-off-email-notifications-af303fe8e36c">Why I turned off email notifications</a> ☞ </h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-23T01:02:24+00:00" pubdate>
          <a href="https://www.timbroder.com/2014/07/why-i-turned-off-email-notifications.html">            <span class='month'>Jul</span> <span class='day'>23rd</span> <span class='year'>2014</span>
          </a>      </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                        <span><a href="/2014/07/why-i-turned-off-email-notifications.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/why-i-turned-off-email-notifications.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2865602782"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><blockquote>
  <p>Just about a week ago I had an epiphany: Email is a constant. It will never
  end.</p>
</blockquote>

<p>></p>

<blockquote>
  <p>More often than not nothing is actionable I made a quick change — turn off
  all notifications for email. None shall pass.</p>
</blockquote>

<p>NO EMAIL NOTIFICATIONS. I've been doing this for about a year now on my phone
and it's amazing. I've been doing it for 3 years on my laptop. I don't know
why I didn't do it on all my devices sooner. (I don't get outlook or gmail
notifications). It lowers stress and helps me focus on <strong>actual tasks</strong>
instead of context switching into email all the time. Context switching is
<strong>expensive</strong></p>

<blockquote>
  <p>Reply too fast, expectations are set</p>
</blockquote>

<p>No arguments here. If someone thinks you respond to emails within 5 mins, they
will expect it. When you don't, you'll be under delivering.</p>

<blockquote>
  <p>If it’s urgent, why are you using email?</p>
</blockquote>

<p>This is a <strong>huge</strong> pet peeve of mine. "Did you have a chance to respond to
that email I sent you 30 seconds ago?" drives me nuts. If it's an emergency,
send me an IM. If I'm offline or don't respond, get up off your ass and walk
over. If I'm remote and offline for some reason, text me.</p>
</section>


</article>
<article class="post" role="article">
        
<header class="post-header">
    <h1 class="post-title"><a href="http://indiestack.com/2014/05/coding-under-par/">Coding Under Par</a> ☞ </h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-23T01:02:13+00:00" pubdate>
          <a href="https://www.timbroder.com/2014/07/coding-under-par.html">            <span class='month'>Jul</span> <span class='day'>23rd</span> <span class='year'>2014</span>
          </a>      </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                        <span><a href="/2014/07/coding-under-par.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/coding-under-par.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2865602818"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><blockquote>
  <p>when it’s midnight and I’m on a perceived roll with some coding challenge,
  there doesn’t appear to be any stopping me. I “have all night,” or at least
  that’s what my monkey brain says. Of course, the smarter half of me knows I
  should be getting calling it a day and getting some much-needed rest.</p>
</blockquote>

<p>I hear this. As I get older, and keep to a rigid sleep schedule, I tend to
find myself being useless after 9pm. I do miss the old days io burning through
until 2am. Now that flux exists to take care of the circadian issues, we
should be able to burn all night. Right? RIGHT!?!</p>
</section>


</article>
<article class="post" role="article">
    
<header class="post-header">
    <h1 class="post-title"><a href="https://www.timbroder.com/2014/07/looping-subviews-downcasting-swift.html">Looping through subviews and downcasting in Swift</a></h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-22T23:23:27+00:00" pubdate>
                      <span class='month'>Jul</span> <span class='day'>22nd</span> <span class='year'>2014</span>
                </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                            <span class="poop2">
                        <a href="https://www.timbroder.com/blog/tags/swift">#swift</a>
                            </span>
                <span><a href="/2014/07/looping-subviews-downcasting-swift.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/looping-subviews-downcasting-swift.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2865530429"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>I've been playing around with Auto-Layout. This snippet was helpful to see
what constraints were set on what views in my View Hierarchy.</p>

<p>Getting the downcast right on the subviews Array took a few tries:</p>

<p>```swift
func showAL(view: UIView) {
    println(&quot;!&quot;)
    println(view)
    println(view.constraints())
}</p>

<pre><code>for view in self.subviews as [UIView] {
    showAL(view)
    for subview in view.subviews as [UIView] {
        showAL(subview)
    }
}
```
</code></pre>
</section>


</article>
<article class="post" role="article">
    
<header class="post-header">
    <h1 class="post-title"><a href="https://www.timbroder.com/2014/07/functions-vs-read-properties-swift.html">Functions or Read-Only Properties in Swift?</a></h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-12T23:22:03+00:00" pubdate>
                      <span class='month'>Jul</span> <span class='day'>12th</span> <span class='year'>2014</span>
                </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                            <span class="poop2">
                        <a href="https://www.timbroder.com/blog/tags/swift">#swift</a>
                            </span>
                <span><a href="/2014/07/functions-vs-read-properties-swift.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/functions-vs-read-properties-swift.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2838888640"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>I’m not sure which is better.  If it's returning something that is directly
tied to the class: a slice/dice of properties is already has, I'm leaning
towards properties. Because of the many examples I <em>feel</em> like read-only
properties are the way to do.  I’m not the only person
[wondering](http://stackoverflow.com/questions/24035276/computed-read-only-
property-vs-function-in-swift), so that’s validating.</p>

<p>Property:</p>

<pre><code data-language="c">extension String {
    var fullSentences: [String] {
        // stuff
    }
}
</code></pre>

<p>Function:</p>

<pre><code data-language="c">extension String {
    func fullSentences() -&amp;gt; [String] {
        // stuff
    }
}
</code></pre>
</section>


</article>
<article class="post" role="article">
    
<header class="post-header">
    <h1 class="post-title"><a href="https://www.timbroder.com/2014/07/playgrounds-in-swift-are-awesome.html">Playgrounds in Swift are Awesome</a></h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-12T23:19:42+00:00" pubdate>
                      <span class='month'>Jul</span> <span class='day'>12th</span> <span class='year'>2014</span>
                </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                            <span class="poop2">
                        <a href="https://www.timbroder.com/blog/tags/swift">#swift</a>
                            </span>
                <span><a href="/2014/07/playgrounds-in-swift-are-awesome.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/playgrounds-in-swift-are-awesome.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2838891542"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>Man alive, I missed this from Python.  More live editing, less edit+build+run.</p>

<p><a href="https://www.flickr.com/photos/timothybroder/14451913518" title="View
'2014-07-12_1822' on Flickr.com"><img src="https://farm6.staticflickr.com/5483/14451913518_c2ef7c5358_b.jpg" alt="2014-07-12_1822" /></a></p>

<p><img src="http://sd.keepcalm-o-matic.co.uk/i/everything-is-awesome-6.png" alt="" /></p>
</section>


</article>
<article class="post" role="article">
    
<header class="post-header">
    <h1 class="post-title"><a href="https://www.timbroder.com/2014/07/parsing-sentences-string-swift.html">Parsing sentences from a String in Swift</a></h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-12T23:08:57+00:00" pubdate>
                      <span class='month'>Jul</span> <span class='day'>12th</span> <span class='year'>2014</span>
                </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                            <span class="poop2">
                        <a href="https://www.timbroder.com/blog/tags/swift">#swift</a>
                            </span>
                <span><a href="/2014/07/parsing-sentences-string-swift.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/parsing-sentences-string-swift.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2838871623"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>I’ve been looking at how to <a href="https://pinboard.in/u:broderboy/t:sentences/">parse
sentences</a> from text recently.
While I’m still looking for a more Machine Learning approach, I found
NSStringEnumerationBySentences which can get me there faster (for now).  I
need to get all of the sentences from a given String.  This could easily be an
Objective-C category method.  But, I’m trying to learn as much Swift as I can.
I haven’t played with extensions yet. Here we go. <code>enumerateSubstringsInRange:options:usingBlock:</code> is what I’ll need, but I need
the extension first:</p>

<pre><code data-language="swift">extension String {

    var fullSentences: [String] {

    }

}
</code></pre>

<p>Fiddling with Swift’s closure syntax for a little while, and using the shorthand for NSStringEnumerationBySentences, I end up with this:</p>

<pre><code data-language="swift">extension String {

    var fullSentences: [String] {

        var sentences = [String]()

        let range = self.rangeOfString(self)



        self.enumerateSubstringsInRange(range, options: .BySentences) { substring, substringRange, enclosingRange, inout in

            sentences += substring

        }



        return sentences

    }

}
</code></pre>

<p>This could have been condensed even more, but I find this very hard to read:</p>

<pre><code data-language="swift">extension String {

    var fullSentences: [String] {

        var sentences = [String]()

        let range = self.rangeOfString(self)



        self.enumerateSubstringsInRange(range, options: .BySentences) { substring, _, _, _ in

            sentences += substring

        }



        return sentences

    }

}
</code></pre>

<p>Ah, but alas. Now I can’t use this in Objective-C. It won’t see the String extension.  It needs to be NSString:</p>

<pre><code data-language="swift">extension NSString {

    var fullSentences: [String] {

        var sentences = [String]()

        let range = self.rangeOfString(self)



        self.enumerateSubstringsInRange(range, options: .BySentences) { substring, substringRange, enclosingRange, inout in

            sentences += substring

        }



        return sentences

    }

}
</code></pre>

<p>I haven’t quite figured out the naming convention for Swift Extension files yet. Right now, I have this in StringExtentions.swift in my categories folder.  Though…. I guess to be proper it should be NSStringExtentions.swift…</p>
</section>


</article>
<article class="post" role="article">
        
<header class="post-header">
    <h1 class="post-title"><a href="https://developer.apple.com/swift/blog/">Apple&#039;s Swift Blog</a> ☞ </h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-11T17:46:58+00:00" pubdate>
          <a href="https://www.timbroder.com/2014/07/apples-swift-blog.html">            <span class='month'>Jul</span> <span class='day'>11th</span> <span class='year'>2014</span>
          </a>      </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                        <span><a href="/2014/07/apples-swift-blog.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/apples-swift-blog.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2835929498"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><blockquote>
  <p>This new blog will bring you a behind-the-scenes look into the design of the
  Swift language by the engineers who created it, in addition to the latest news
  and hints to turn you into a productive Swift programmer.</p>
</blockquote>

<p>I LOVE the new, open-er Apple. From the barriers between iOS and OSX coming
down, some Apple devs being more open on twitter and in the dev forums, and
now this <a href="https://developer.apple.com/swift/blog/">blog</a>.</p>

<p>It’s an amazing time to be using Apple dev tools</p>
</section>


</article>
<article class="post" role="article">
        
<header class="post-header">
    <h1 class="post-title"><a href="http://shawnblanc.net/2014/07/on-working-from-home-and-running-a-business/">On Working From Home and Running a Business</a> ☞ </h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-11T01:11:46+00:00" pubdate>
          <a href="https://www.timbroder.com/2014/07/on-working-from-home-and-running-a-business.html">            <span class='month'>Jul</span> <span class='day'>11th</span> <span class='year'>2014</span>
          </a>      </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                        <span><a href="/2014/07/on-working-from-home-and-running-a-business.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/on-working-from-home-and-running-a-business.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2835011778"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>Shawn Blanc talks about how he organizes himself and his company for working
from home. One day...</p>

<blockquote>
  <p>I cannot express enough just how absolutely critical it has been to have a
  budget — both for our company and for our personal household expenses.</p>
</blockquote>

<p>></p>

<blockquote>
  <p>Did you know that most of America’s millionaires are people who earn low-
  six-figure incomes? They have a high net worth (between $1 – $10 million)
  because they live simply and budget their money.</p>
</blockquote>

<p>When we were saving for the down pay payment on our condo we were using a
combination of mint.com and an allowance (envelope method, cash) I've started
playing around with mint again to get a better idea of what we spend lonely on
and prep us for the next chapter.</p>
</section>


</article>
<article class="post" role="article">
    
<header class="post-header">
    <h1 class="post-title"><a href="https://www.timbroder.com/2014/07/format-json-and-save-to-gist.html">Format JSON and save to gist with Alfred</a></h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-08T21:02:32+00:00" pubdate>
                      <span class='month'>Jul</span> <span class='day'>8th</span> <span class='year'>2014</span>
                </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                            <span class="poop2">
                        <a href="https://www.timbroder.com/blog/tags/alfred">#alfred</a>
                        <a href="https://www.timbroder.com/blog/tags/github">#github</a>
                        <a href="https://www.timbroder.com/blog/tags/json">#json</a>
                            </span>
                <span><a href="/2014/07/format-json-and-save-to-gist.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/format-json-and-save-to-gist.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2828067152"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>At work, we have an Angular app that deals with a lot of custom JSON. With a
distributed dev team, we pass a LOT of JSON around.  Copying from Chrome’s net
tab, formatting, adding to a Github <a href="https://gist.github.com/">gist</a> for easy
transport is a PITA when you are doing it 20 times a day. I have 2 Alfred
workflows to help with this.</p>

<p>My Use:</p>

<ol>
<li>Copy unformatted JSON to clipboard</li>
<li>Alfred “JsonLint”. Formatted JSON is now in my clipboard</li>
<li>Alfred “gist”. URL to raw gist is now in my clipboard</li>
<li>One of these days I’ll chain these together</li>
</ol>

<p>To get this working:</p>

<ol>
<li>You’ll need the Alfred <a href="http://www.alfredapp.com/powerpack/">PowerPack</a></li>
<li>Install my JSON lint <a href="https://github.com/broderboy/AlfredJsonLint/blob/master/Json%20Lint.alfredworkflow?raw=true">workflow</a>. (It needs work, but gets the job done)</li>
<li>Install <a href="https://github.com/phallstrom/AlfredGist">AlfredGist</a></li>
</ol>

<p>* Be sure to follow the setup <a href="https://github.com/phallstrom/AlfredGist">instructions</a>.
  * I prefer to have the ‘raw’ url returned from AlfredGist. (in the clipboard and opened)<br />
To enable this, open functions.sh<br />
Look for this line: <code>gist_url=$(get_json_key “html_url" "$json")</code>
Modify to: <code>gist_url=$(get_json_key “raw_url” "$json")</code></p>

<ul>
<li>In “gistconfig” set the gists to be private</li>
</ul>

<p>You should now be able to chain together as I listed above</p>

<p>Let me know if you have any questions!</p>
</section>


</article>
<article class="post" role="article">
        
<header class="post-header">
    <h1 class="post-title"><a href="http://dcurt.is/facebooks-predicament">Whatever goes up, that’s what we do</a> ☞ </h1>
    <section class="post-meta">
      <time class="post-date" datetime="2014-07-06T19:57:34+00:00" pubdate>
          <a href="https://www.timbroder.com/2014/07/whatever-goes-up-thats-what-we-do.html">            <span class='month'>Jul</span> <span class='day'>6th</span> <span class='year'>2014</span>
          </a>      </time>

                    <span class="poop2"> in
                        <a href="https://www.timbroder.com/blog/categories/Code">Code</a>                            </span>
                        <span><a href="/2014/07/whatever-goes-up-thats-what-we-do.html" class="poop" style="color:#4A4A4A">๏</a></span>
        <div class="comment-count">
            <a href="https://www.timbroder.com/2014/07/whatever-goes-up-thats-what-we-do.html#disqus_thread" class="disqus-comment-count"
                                    data-disqus-identifier="2828119702"
                            ></a>
        </div>
    </section>

  </header>

  <section class="post-content"><p>This is a quite from a Facebook employee:</p>

<blockquote>
  <p>We’re blind. It doesn’t matter what any individual person thinks about
  something new. Everything must be tested. It’s feature echolocation: we throw
  out an idea, and when the data comes back we look at the numbers. Whatever
  goes up, that’s what we do. We are slaves to the numbers. We don’t operate
  around innovation. We only optimize. We do what goes up.</p>
</blockquote>

<p>There is a flip side to this too, right? Facebook HAS that kind of data. What
I wouldn't DO for that kind of data. Do we have our own custom tracking
(Google Analytics) on our magneto sites at work? Of course. Does it get us the
data we need? Yes and know. We can track conversions, user flows, A/B test
what we need. But, the pixel level knowledge of HOW a user is using the site
that Facebook seems to have seems pretty slick.</p>
</section>


</article>
<nav>
    <a href="https://www.timbroder.com/blog/categories/3">Newer Posts</a><br />
    <a href="https://www.timbroder.com/blog/categories/5">Older Posts</a><br />
</nav>

    </main>


                        <footer class="site-footer clearfix">
    <section>
            <span class="tag size2"><a href="/blog/tags/"></a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/AVSpeechSynthesizer">AVSpeechSynthesizer</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Ai">Ai</a></span>
            &nbsp;
        <span class="tag size8"><a href="/blog/tags/Android">Android</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Atom">Atom</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Avengers">Avengers</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Batman">Batman</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Batman%20Inc.">Batman Inc.</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Batman%20and%20Robin">Batman and Robin</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/CKEditor">CKEditor</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/Calibre">Calibre</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Cheese">Cheese</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/ComicCon">ComicCon</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/CoreData">CoreData</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/DRM">DRM</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/Docs%20Spreadsheets">Docs Spreadsheets</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/ESI">ESI</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Fontis">Fontis</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/GME">GME</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/GTD">GTD</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/GWT">GWT</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Garlic">Garlic</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/Google">Google</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/Google%20Reader">Google Reader</a></span>
            &nbsp;
        <span class="tag size9"><a href="/blog/tags/HOWTO">HOWTO</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Hulu">Hulu</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Internet%20Explorer">Internet Explorer</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/JIRA">JIRA</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/Kindle">Kindle</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/Mashups">Mashups</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Memcached">Memcached</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/OmniFocus">OmniFocus</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Oracle">Oracle</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/PHPUnit">PHPUnit</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/PostgreSQL">PostgreSQL</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/RSS">RSS</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Redmine">Redmine</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Remember%20the%20Milk">Remember the Milk</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Ruby">Ruby</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/SQL">SQL</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Shared%20web%20hosting%20service">Shared web hosting service</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Siri">Siri</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Skype">Skype</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Sony%20Reader">Sony Reader</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Stan%20Lee">Stan Lee</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/TDD">TDD</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Terminator">Terminator</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/TinyMCE">TinyMCE</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Vibrams">Vibrams</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Virtual%20hosting">Virtual hosting</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Virtual%20private%20server">Virtual private server</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Walking%20Dead">Walking Dead</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Web%20hosting">Web hosting</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/YUI">YUI</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/Zend">Zend</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/adwhirl">adwhirl</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/adwords">adwords</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/aiaio">aiaio</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/ajax">ajax</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/alfred">alfred</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/analytics">analytics</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/angularjs">angularjs</a></span>
            &nbsp;
        <span class="tag size4"><a href="/blog/tags/appengine">appengine</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/apple">apple</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/applepay">applepay</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/apps">apps</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/autocomplete">autocomplete</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/automation">automation</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/beta">beta</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/bit.ly">bit.ly</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/blackberry">blackberry</a></span>
            &nbsp;
        <span class="tag size4"><a href="/blog/tags/blogger">blogger</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/bookmarks">bookmarks</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/brightkite">brightkite</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/calendar">calendar</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/chrome">chrome</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/coffee">coffee</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/css">css</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/debug">debug</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/digg">digg</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/django">django</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/drafts">drafts</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/dropbox">dropbox</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/encryption">encryption</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/engagement">engagement</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/events">events</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/facebook">facebook</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/firefox">firefox</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/friendfeed">friendfeed</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/gadgets">gadgets</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/gchat">gchat</a></span>
            &nbsp;
        <span class="tag size4"><a href="/blog/tags/gdata">gdata</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/gdrive">gdrive</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/gears">gears</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/git">git</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/github">github</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/gmail">gmail</a></span>
            &nbsp;
        <span class="tag size5"><a href="/blog/tags/gpowered.net">gpowered.net</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/greasemonkey">greasemonkey</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/groups">groups</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/homebrew">homebrew</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/instapaper">instapaper</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/interfacebuilder">interfacebuilder</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/ios">ios</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/ipad">ipad</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/iphone">iphone</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/javascript">javascript</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/jira">jira</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/jquery">jquery</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/json">json</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/kids">kids</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/laravel">laravel</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/launch%20center%20pro">launch center pro</a></span>
            &nbsp;
        <span class="tag size5"><a href="/blog/tags/magento">magento</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/maps">maps</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/mercurial">mercurial</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/mock">mock</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/mongodb">mongodb</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/music">music</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/mysql">mysql</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/netbook">netbook</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/nosql">nosql</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/objective%20c">objective c</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/oil">oil</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/omnifocus">omnifocus</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/opensocial">opensocial</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/opensource">opensource</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/os">os</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/osx">osx</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/pesto">pesto</a></span>
            &nbsp;
        <span class="tag size7"><a href="/blog/tags/php">php</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/picasa%20web">picasa web</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/podcasts">podcasts</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/powershell">powershell</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/primal">primal</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/productivity">productivity</a></span>
            &nbsp;
        <span class="tag size6"><a href="/blog/tags/python">python</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/pythonista">pythonista</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/quick">quick</a></span>
            &nbsp;
        <span class="tag size4"><a href="/blog/tags/reader">reader</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/realm">realm</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/regex">regex</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/running">running</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/search">search</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/security">security</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/seo">seo</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/sketch">sketch</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/skynet">skynet</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/sleep">sleep</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/socialgraph">socialgraph</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/solr">solr</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/startup">startup</a></span>
            &nbsp;
        <span class="tag size4"><a href="/blog/tags/swift">swift</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/testing">testing</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/textmate">textmate</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/timbroder.com">timbroder.com</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/todoist">todoist</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/twitter">twitter</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/twitter2gTalk">twitter2gTalk</a></span>
            &nbsp;
        <span class="tag size6"><a href="/blog/tags/ubuntu">ubuntu</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/urls">urls</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/vagrant">vagrant</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/varnish">varnish</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/virtualenv">virtualenv</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/winamp">winamp</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/windows">windows</a></span>
            &nbsp;
        <span class="tag size3"><a href="/blog/tags/wordpress">wordpress</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/xbox">xbox</a></span>
            &nbsp;
        <span class="tag size2"><a href="/blog/tags/xcode">xcode</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/xml">xml</a></span>
            &nbsp;
        <span class="tag size1"><a href="/blog/tags/yahoo%20pipes">yahoo pipes</a></span>
            &nbsp;
        <span class="tag size0"><a href="/blog/tags/youtube">youtube</a></span>
            &nbsp;
    
    </section>
    <section class="copyright">
        Copyright &copy; 2007-2018 -
         Tim Broder -         <span class="credit">Powered by <a href="http://sculpin.io">Sculpin</a></span>
    </section>
</footer>
                <script src="//cdnjs.cloudflare.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
<script type="text/javascript" src="https://www.timbroder.com/themes/broderboy/deadfish/assets/js/index.js"></script>
<script type="text/javascript" src="https://www.timbroder.com/themes/broderboy/deadfish/assets/js/rainbow.min.js"></script>
<script type="text/javascript" src="https://www.timbroder.com/themes/broderboy/deadfish/assets/js/rlns.min.js"></script>

<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES: EDIT BEFORE PASTING INTO YOUR WEBPAGE * * */
    var disqus_shortname = 'timbrodercom'; // required: replace example with your forum shortname

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function () {
        var s = document.createElement('script'); s.async = true;
        s.type = 'text/javascript';
        s.src = '//' + disqus_shortname + '.disqus.com/count.js';
        (document.getElementsByTagName('HEAD')[0] || document.getElementsByTagName('BODY')[0]).appendChild(s);
    }());
</script>

<script>
    (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
        (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
            m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
    })(window,document,'script','//www.google-analytics.com/analytics.js','ga');

    ga('create', 'UA-17099661-1', 'auto');
    ga('send', 'pageview');

</script>    </div>
</body>
</html>
