<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/django.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[Generating an InlineModelAdmin Form on the fly in Django]]></title>
            <link href="https://www.timbroder.com/2012/09/generating-an-inlineadmin-form-on-the-fly-in-django.html"/>
            <updated>2012-09-11T19:17:52+00:00</updated>
            <id>https://www.timbroder.com/2012/09/generating-an-inlineadmin-form-on-the-fly-in-django.html</id>
            <content type="html"><![CDATA[<p>I'm adding drag/drop uploading to the django admin for one of our open source
projects called <a href="https://github.com/aiaio/ai-stager">Stager</a>. A blog post
about that will follow, it's not screen-shot ready yet.  While doing this I
knew we needed a pretty seamless transition after the upload finished, and
that we would have to refresh the inline.  I didn't want a full page refresh,
so let's ajax it in.</p>

<p>For these examples just assume that we have a parent CompAdmin which has an model of Comp and an inline called CompSlideInline.  We store the instance of the Comp in comp.</p>

<pre><code data-language="python">from django.template import loader, Context
from django.contrib.admin import helpers
from django.db import transaction
from django.contrib import admin

comp = Comp.objects.get(id=comp_id)
#get the current site
admin_site = admin.site
compAdmin = CompAdmin(Comp, admin_site)

#get all possible inlines for the parent Admin
inline_instances = compAdmin.get_inline_instances(request)
prefixes = {}

for FormSet, inline in zip(compAdmin.get_formsets(request, comp), inline_instances):
    #get the inline of interest and generate it's formset
    if isinstance(inline, CompSlideInline):
        prefix = FormSet.get_default_prefix()
        prefixes[prefix] = prefixes.get(prefix, 0) + 1
        if prefixes[prefix] != 1 or not prefix:
            prefix = &amp;quot;%s-%s&amp;quot; % (prefix, prefixes[prefix])
        formset = FormSet(instance=comp, prefix=prefix, queryset=inline.queryset(request))

#get possible fieldsets, readonly, and prepopulated information for the parent Admin
fieldsets = list(inline.get_fieldsets(request, comp))
readonly = list(inline.get_readonly_fields(request, comp))
prepopulated = dict(inline.get_prepopulated_fields(request, comp))

#generate the inline formset
inline_admin_formset = helpers.InlineAdminFormSet(inline, formset,
            fieldsets, prepopulated, readonly, model_admin=compAdmin)

#render the template
t = loader.get_template('tabular.html')
c = Context({ 'inline_admin_formset': inline_admin_formset })
rendered = t.render(c)
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Getting Started with Solr and Django]]></title>
            <link href="https://www.timbroder.com/2012/08/getting-started-with-solr-and-django.html"/>
            <updated>2012-08-23T19:45:56+00:00</updated>
            <id>https://www.timbroder.com/2012/08/getting-started-with-solr-and-django.html</id>
            <content type="html"><![CDATA[<p><a href="http://lucene.apache.org/solr/">Solr</a> is a very powerful search tool and it
is pretty easy to get the basics, such as full text search, facets, and
related assets up and running pretty quickly. We will be using haystack to do
the communication between Django and Solr. All code for this can be viewed on
<a href="https://github.com/broderboy/django-solr-demo">github</a>.</p>

<h2 id="install">Install</h2>

<p>Assuming you already have Django up and running, the first thing we need to do
is install Solr.</p>

<pre><code>curl -O http://mirrors.gigenet.com/apache/lucene/solr/4.0.0-BETA/apache-solr-4.0.0-BETA.zip
unzip apache-solr-4.0.0-BETA.zip
cd apache-solr-4.0.0-BETA
cd example
java -jar start.jar
</code></pre>

<p>Next install pysolr and haystack. (At the time of this writing the git
checkout of haystack works better with the Solr 4.0 beta then the 1.2.7 that's
in pip.)</p>

<pre><code>pip install pysolr
pip install -e https://github.com/toastdriven/django-haystack.git
</code></pre>

<p>Add 'haystack' to INSTALLED_APPS in settings.py and add the following haystack
connection:</p>

<pre><code data-language="python">HAYSTACK_CONNECTIONS = { 
    'default': { 
        'ENGINE': 'haystack.backends.solr_backend.SolrEngine', 
        'URL': 'http://127.0.0.1:8983/solr' 
    }, 
}
</code></pre>

<h2 id="full-text-search">Full Text Search</h2>

<p>For the example, we're going to create a simple job database that a recruiter
might use. Here is the model:</p>

<pre><code data-language="python">from django.db import models
from django.contrib.localflavor.us
import models as us_models

JOB_TYPES = (
    ('pt', 'Part Time'),
    ('ft', 'Full Time'),
    ('ct', 'Contract')
)

class Company(models.Model):
    name = models.CharField(max_length=64)
    address = models.TextField(blank=True, null=True)
    contact_email = models.EmailField()

    def __unicode__(self):
        return self.name

class Location(models.Model):
    city = models.CharField(max_length=64)
    state = us_models.USStateField()

    def __unicode__(self):
        return "%s, %s" % (self.city, self.state)

class Job(models.Model):
    name = models.CharField(max_length=64)
    description = models.TextField()
    salary = models.CharField(max_length=64, blank=True, null=True)
    type = models.CharField(max_length=2, choices=JOB_TYPES)
    company = models.ForeignKey(Company, related_name='jobs')
    location = models.ForeignKey(Location, related_name='location_jobs')
    contact_email = models.EmailField(blank=True, null=True)
    added_at = models.DateTimeField(auto_now=True)

    def __unicode__(self):
        return self.name

    def get_contact_email(self):
        if self.contact_email:
            return self.contact_email

        return self.company.contact_email
</code></pre>

<p>The next step is to create the
SearchIndex object that will be used to transpose to data to Solr. save this
as search_indexes.py in the same folder as your models.py. The text field with
its template will be used for full text search on Solr. The other two fields
will be used to faceted (drill down) navigation. For more details on this
file, check out the [haystack tutorial](http://django-
haystack.readthedocs.org/en/latest/tutorial.html#handling-data).</p>

<pre><code>class JobIndex(indexes.SearchIndex, indexes.Indexable):
    text = indexes.CharField(document=True, use_template=True)
    type = indexes.CharField(model_attr='type', faceted=True)
    location = indexes.CharField(model_attr='location', faceted=True)

    def get_model(self):
        return Job

    def index_queryset(self):
        return self.get_model().objects.all()
</code></pre>

<p>Create the search index template in your template folder with the following
naming convention: <code>search/indexes/[app]/[model]_text.txt</code></p>

<p>For us, this is templates/search/indexes/jobs/job_text.txt</p>

<pre><code data-language="HTML">
{{ object.name }}
{{ object.description }}
{{ object.salary }}
{{ object.type }}
{{ object.added_at }}

</code></pre>

<p>Now, lets get our data into Solr. Run ./manage.py build_solr_schema to
generate a schema.xml file. Move this into example\solr\conf in your Solr
install. Note: if using Solr 4, edit this file and replace stopwords_en.txt
with lang/stopwords_en.txt in all locations. To test everything and load your
data, run: manage.py rebuild_index Subsequent updates can be made with:
manage.py update_index.</p>

<p>If that all worked we can start working on the front-end to see the data in
Django. Add this to your urls.py</p>

<pre><code>(r'^$', include('haystack.urls')),
</code></pre>

<p>At this point there are at least two templates we'll need. One for the search
results page, and a sub-template to represent each item we are pulling back.
My example uses <a href="http://twitter.github.com/bootstrap/">twitter bootstrap</a> for
some layout help and styling, see my base.html
[here](https://github.com/broderboy/django-solr-
demo/blob/master/templates/base.html) if interested.</p>

<p>Create templates/search/search.html This gives you a basic search form, the
results, and pagination for a number of results</p>

<pre><code data-language="HTML">
{% extends 'base.html' %}

{% block hero_text %}Search{% endblock %}
{% block header %}&lt;p&gt;Click around!&lt;/p&gt;{% endblock %}


{% block content %}
&lt;div class="span12"&gt;
    &lt;h1&gt;Search&lt;/h1&gt;
    &lt;form method="get" action="." class=".form-search"&gt;
        &lt;table&gt;
            {{ form.as_table }}
        &lt;/table&gt;
        &lt;input type="submit" value="Search"&gt;
    &lt;/form&gt;
&lt;/div&gt;
        {% if query %}
            &lt;div class="span2"&gt;
                &lt;h3&gt;Filter&lt;/h3&gt;
                {% if facets.fields.type %}
                    &lt;div&gt;
                        &lt;h4&gt;Type&lt;/h4&gt;
                        &lt;ul&gt;
                        {% for type in facets.fields.type %}
                            &lt;li&gt;&lt;a href="{{ request.get_full_path }}&amp;amp;selected_facets=type_exact:{{ type.0|urlencode }}"&gt;{{ type.0 }}&lt;/a&gt; ({{ type.1 }})&lt;/li&gt;
                        {% endfor %}
                        &lt;/ul&gt;
                    &lt;/div&gt;
                {% endif %}
                {% if facets.fields.location %}
                    &lt;div&gt;
                        &lt;h4&gt;Location&lt;/h4&gt;
                        &lt;ul&gt;
                        {% for location in facets.fields.location %}
                            &lt;li&gt;&lt;a href="{{ request.get_full_path }}&amp;amp;selected_facets=location_exact:{{ location.0|urlencode }}"&gt;{{ location.0 }}&lt;/a&gt; ({{ location.1 }})&lt;/li&gt;
                        {% endfor %}
                        &lt;/ul&gt;
                    &lt;/div&gt;
                {% endif %}
            &lt;/div&gt;
            &lt;div class="span6"&gt;
                &lt;h3&gt;Results&lt;/h3&gt;
                &lt;div class="accordion" id="accordion2"&gt;
                    {% for result in page.object_list %}
                        {% include 'search/_result_object.html' %}
                    {% empty %}
                        &lt;p&gt;No results found.&lt;/p&gt;
                    {% endfor %}
                &lt;/div&gt;

                {% if page.has_previous or page.has_next %}
                    &lt;div&gt;
                        {% if page.has_previous %}&lt;a href="?q={{ query }}&amp;amp;page={{ page.previous_page_number }}"&gt;{% endif %}&amp;laquo; Previous{% if page.has_previous %}&lt;/a&gt;{% endif %}
                        |
                        {% if page.has_next %}&lt;a href="?q={{ query }}&amp;amp;page={{ page.next_page_number }}"&gt;{% endif %}Next &amp;raquo;{% if page.has_next %}&lt;/a&gt;{% endif %}
                    &lt;/div&gt;
                {% endif %}
            &lt;/div&gt;
        {% else %}
            &lt;div class="span6"&gt;
                {# Show some example queries to run, maybe query syntax, something else? #}
            &lt;/div&gt;
        {% endif %}
{% endblock %}

</code></pre>

<p>And the templates/search/_result_object.txt</p>

<pre><code data-language="HTML">
{% load more_like_this %}


{% with obj=result.object %}
&lt;div class="accordion-group"&gt;
    &lt;div class="accordion-heading"&gt;
        &lt;a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapse_{{ obj.id }}"&gt;
            {{ obj.name }}
        &lt;/a&gt;
        &lt;div style="padding: 8px 15px;"&gt;
            &lt;p&gt;Company: {{ obj.company }}&lt;/p&gt;
            &lt;p&gt;Type: {{ obj.type }}&lt;/p&gt;
            {% if obj.salary %}&lt;p&gt;Salary: {{ obj.salary }}&lt;/p&gt;{% endif %}
            &lt;p&gt;Location: {{ obj.location }}&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="collapse_{{ obj.id }}" class="accordion-body collapse in"&gt;
        &lt;div class="accordion-inner"&gt;
            &lt;p&gt;Contact: &lt;a href="mailto:{{ obj.get_contact_email }}"&gt;{{ obj.get_contact_email }}&lt;/a&gt;&lt;/p&gt;
            {{ obj.description }}
            {% more_like_this obj as related_content limit 5  %}
            {% if related_content %}
                &lt;div&gt;
                    &lt;br&gt;
                    &lt;p&gt;&lt;strong&gt;Related:&lt;/strong&gt;&lt;/p&gt;
                    &lt;ul&gt;
                        {% for related in related_content %}
                            &lt;li&gt;&lt;a&gt;{{ related.object.name }}&lt;/a&gt;&lt;/li&gt;
                        {% endfor %}
                    &lt;/ul&gt;
                &lt;/div&gt;
            {% endif %}
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
{% endwith %}

</code></pre>

<p>Start up your dev server for search!</p>

<p><a href="/images/2012/08/solr1.png"><img src="/images/2012/08/solr1.png" alt="" /></a></p>

<h2 id="related-items">Related Items</h2>

<p>Adding Related Items is as simple as using the related_content tag in the
haystack more_like_this tag library and tweaking out Solr config. Open up
solrconfig.xml and add a MoreLikeThisHandler within thetag:</p>

<pre><code data-language="XML">&lt;requesthandler name="/mlt" class="solr.MoreLikeThisHandler"&gt;&lt;/requesthandler&gt;
</code></pre>

<p>Our full _result_object.html now looks like this:</p>

<pre><code data-language="HTML">
{% load more_like_this %}


{% with obj=result.object %}
&lt;div class="accordion-group"&gt;
    &lt;div class="accordion-heading"&gt;
        &lt;a class="accordion-toggle" data-toggle="collapse" data-parent="#accordion2" href="#collapse_{{ obj.id }}"&gt;
            {{ obj.name }}
        &lt;/a&gt;
        &lt;div style="padding: 8px 15px;"&gt;
            &lt;p&gt;Company: {{ obj.company }}&lt;/p&gt;
            &lt;p&gt;Type: {{ obj.type }}&lt;/p&gt;
            {% if obj.salary %}&lt;p&gt;Salary: {{ obj.salary }}&lt;/p&gt;{% endif %}
            &lt;p&gt;Location: {{ obj.location }}&lt;/p&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id="collapse_{{ obj.id }}" class="accordion-body collapse in"&gt;
        &lt;div class="accordion-inner"&gt;
            &lt;p&gt;Contact: &lt;a href="mailto:{{ obj.get_contact_email }}"&gt;{{ obj.get_contact_email }}&lt;/a&gt;&lt;/p&gt;
            {{ obj.description }}
            {% more_like_this obj as related_content limit 5  %}
            {% if related_content %}
                &lt;div&gt;
                    &lt;br /&gt;
                    &lt;p&gt;&lt;strong&gt;Related:&lt;/strong&gt;&lt;/p&gt;
                    &lt;ul&gt;
                        {% for related in related_content %}
                            &lt;li&gt;&lt;a&gt;{{ related.object.name }}&lt;/a&gt;&lt;/li&gt;
                        {% endfor %}
                    &lt;/ul&gt;
                &lt;/div&gt;
            {% endif %}
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
{% endwith %}

</code></pre>

<h2 id="facets">Facets</h2>

<p>To get our type and location facets, we'll have to add them to a queryset and
pass this to a FacetedSearchView instead of the default one. urls.py now looks
like this:</p>

<pre><code data-language="python">from django.conf.urls import patterns, include, url
from django.contrib import admin
admin.autodiscover()
from haystack.forms import FacetedSearchForm
from haystack.query import SearchQuerySet
from haystack.views import FacetedSearchView

sqs = SearchQuerySet().facet('type').facet('location')

urlpatterns = patterns('haystack.views',
    url(r'^$', FacetedSearchView(form_class=FacetedSearchForm, searchqueryset=sqs), name='haystack_search'),
)

urlpatterns = urlpatterns + patterns('',
    url(r'^admin/', include(admin.site.urls)),
    #(r'^', include('haystack.urls')),
)
- See more at: http://timbroder.com/2012/08/getting-started-with-solr-and-django.html?preview=true&amp;preview_id=1167&amp;preview_nonce=f6c209628d#sthash.2NVpbeDJ.dpuf
</code></pre>

<p>Then, we can use the generated facets in the search template in the facets
variable</p>

<pre><code data-language="html">
{% extends 'base.html' %}

{% block hero_text %}Search{% endblock %}
{% block header %}&lt;/p&gt;&lt;p&gt;Click around!&lt;/p&gt;{% endblock %}


{% block content %}
&lt;div class="span12"&gt;
    &lt;h1&gt;Search&lt;/h1&gt;
    &lt;form method="get" action="." class=".form-search"&gt;
        &lt;table&gt;
            {{ form.as_table }}
        &lt;/table&gt;
        &lt;input type="submit" value="Search"/&gt;
    &lt;/form&gt;
&lt;/div&gt;
        {% if query %}
            &lt;div class="span2"&gt;
                &lt;h3&gt;Filter&lt;/h3&gt;
                {% if facets.fields.type %}
                    &lt;div&gt;
                        &lt;h4&gt;Type&lt;/h4&gt;
                        &lt;ul&gt;
                        {% for type in facets.fields.type %}
                            &lt;li&gt;&lt;a href="{{ request.get_full_path }}&amp;amp;selected_facets=type_exact:{{ type.0|urlencode }}"&gt;{{ type.0 }}&lt;/a&gt; ({{ type.1 }})&lt;/li&gt;
                        {% endfor %}
                        &lt;/ul&gt;
                    &lt;/div&gt;
                {% endif %}
                {% if facets.fields.location %}
                    &lt;div&gt;
                        &lt;h4&gt;Location&lt;/h4&gt;
                        &lt;ul&gt;
                        {% for location in facets.fields.location %}
                            &lt;li&gt;&lt;a href="{{ request.get_full_path }}&amp;amp;selected_facets=location_exact:{{ location.0|urlencode }}"&gt;{{ location.0 }}&lt;/a&gt; ({{ location.1 }})&lt;/li&gt;
                        {% endfor %}
                        &lt;/ul&gt;
                    &lt;/div&gt;
                {% endif %}
            &lt;/div&gt;
            &lt;div class="span6"&gt;
                &lt;h3&gt;Results&lt;/h3&gt;
                &lt;div class="accordion" id="accordion2"&gt;
                    {% for result in page.object_list %}
                        {% include 'search/_result_object.html' %}
                    {% empty %}
                        &lt;p&gt;No results found.&lt;/p&gt;
                    {% endfor %}
                &lt;/div&gt;

                {% if page.has_previous or page.has_next %}
                    &lt;div&gt;
                        {% if page.has_previous %}&lt;a href="?q={{ query }}&amp;amp;page={{ page.previous_page_number }}"&gt;{% endif %}&amp;laquo; Previous{% if page.has_previous %}&lt;/a&gt;{% endif %}
                        |
                        {% if page.has_next %}&lt;a href="?q={{ query }}&amp;amp;page={{ page.next_page_number }}"&gt;{% endif %}Next &amp;raquo;{% if page.has_next %}&lt;/a&gt;{% endif %}
                    &lt;/div&gt;
                {% endif %}
            &lt;/div&gt;
        {% else %}
            &lt;div class="span6"&gt;
                {# Show some example queries to run, maybe query syntax, something else? #}
            &lt;/div&gt;
        {% endif %}
{% endblock %}

</code></pre>

<p>And we're done! As I said, check out the [haystack documentation](http
://django-haystack.readthedocs.org/en/latest/index.html) for more information.
Leave any questions in the comments and I'll be sure to answer them</p>

<p>[![](http://timbroder.com/wp-
content/uploads/2012/08/solr2.png)](http://timbroder.com/wp-
content/uploads/2012/08/solr2.png)</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Hiding fields in the Django admin based on permission]]></title>
            <link href="https://www.timbroder.com/2012/08/hiding-fields-in-the-admin-based-on-permission.html"/>
            <updated>2012-08-20T16:53:46+00:00</updated>
            <id>https://www.timbroder.com/2012/08/hiding-fields-in-the-admin-based-on-permission.html</id>
            <content type="html"><![CDATA[<p>Quick and easy if you have one group of users that can only edit an asset, and
another group that has publishing rights</p>

<pre><code data-language="python">def remove_from_fieldsets(fieldsets, fields):
    for fieldset in fieldsets:
        for field in fields:
            if field in fieldset[1]['fields']:
                new_fields = []
                for new_field in fieldset[1]['fields']:
                    if not new_field in fields:
                        new_fields.append(new_field)

                fieldset[1]['fields'] = tuple(new_fields)
                break

class PositionAdmin(admin.ModelAdmin):
    ...
    def get_fieldsets(self, request, obj=None):
        fieldsets = super(PositionAdmin, self).get_fieldsets(request, obj)

        if not request.user.is_superuser and request.user.groups.filter(name='publisher').count() == 0:
            remove_from_fieldsets(fieldsets, ('is_published',))
        return fieldsets
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Making virtualenv on windows with powershell a little cleaner]]></title>
            <link href="https://www.timbroder.com/2012/05/making-virtualenv-on-windows-with-powershell-a-little-cleaner.html"/>
            <updated>2012-05-22T15:27:45+00:00</updated>
            <id>https://www.timbroder.com/2012/05/making-virtualenv-on-windows-with-powershell-a-little-cleaner.html</id>
            <content type="html"><![CDATA[<p>While I code on a mac at home, I can't live without my giant dual screens and
solid state drive at work so I'm on a windows 7 box.  Most of the time it's
fine, does everything I need, and I'm happy.  I became full of rage for the
first time last week trying to properly get virtualenv to play nice with
powershell.  (If you code on windows and are in the terminal a lot, switch to
powershell, its great and comes with windows 7. There is a download for
Windows XP) I'm not going to recap how to set up virtualenv for your project
as there is a great walk through on that
<a href="http://www.saltycrane.com/blog/2009/05/notes-using-pip-and-virtualenv-django/">here</a>.  The issue on windows is around when you want to activate your
project.  Powershell has a restricted execution policy turned on by default.
The manual way around this is to run powershell as an administrator, and run
this: [code] Set-ExecutionPolicy Unrestricted [/code] Works, but that's an
extra click.  You can also change this value permanently in the registry at
the key listed below, but that didn't seem to stick when opening powershell
through <a href="http://www.launchy.net/">launchy</a> [code]
HKLM\Software\Microsoft\PowerShell\1\ShellIds\Microsoft.PowerShell [/code]
Enter my hacked up solution. Create a shortcut for powershell with these
parameters:</p>

<pre><code>Target: %SystemRoot%\syswow64\WindowsPowerShell\v1.0\powershell.exe -ExecutionPolicy
Unrestricted Start In: %HOMEDRIVE%%HOMEPATH% 
</code></pre>

<p>Then, if your workspace and projects are set up relatively the same, you can create a powershell script (or a cmd script if not using powershell), named workon.ps1 that looks
something like this:</p>

<pre><code>$ENV:PYTHONPATH="" 
cd C:\Users\tbroder\workspace\$args\ .\myenv\Scripts\activate
</code></pre>

<p>I threw
this in my C:\Python26\Scripts folder.  It assumes your project lives in a
workspace folder, that your project name is a single word, and that all of
your virtualenvs are called myenv.  Example of using it below:</p>

<pre><code>Windows PowerShell Copyright (C) 2009 Microsoft Corporation. All rights reserved. PS
C:\Users\tbroder&amp;gt; workon gsb (myenv) PS C:\Users\tbroder\workspace\gsb&amp;gt;
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Developing with multiple versions of Django on windows]]></title>
            <link href="https://www.timbroder.com/2012/04/developing-with-multiple-versions-of-django-on-windows.html"/>
            <updated>2012-04-19T16:47:46+00:00</updated>
            <id>https://www.timbroder.com/2012/04/developing-with-multiple-versions-of-django-on-windows.html</id>
            <content type="html"><![CDATA[<p>At <a href="http://www.alexanderinteractive.com/">work</a>, we have sites that use
various versions of <a href="https://www.djangoproject.com/">Django</a>, so there is a
need to switch packages.  On my mac I use
<a href="http://www.virtualenv.org/en/latest/index.html">virtualenv</a> to handle this,
but I've never quite gotten it to play nice with windows, and just switching
Django versions has sufficed so far. If you can set up virtualenv, that's a
much better solution</p>

<ol>
<li>Download <a href="http://technet.microsoft.com/en-us/sysinternals/bb896768">junction</a> (think symbolic links for windows). Put the executable somewhere in your path. I put it in my Python scripts folder <code>(C:\Python26\Scripts)</code></li>
<li>Plan out your directory structure: Make sure you don't have any stock django eggs or folders in your site-packages folder</li>
<li>Create a django_veresions folder in site-packages <code>(C:\Python26\Lib\site-packages\django_versions)</code></li>
<li>In this folder I put my different django installs 
<code>C:\Python26\Lib\site-packages\django_versions\1.1\django 
C:\Python26\Lib\site-packages\django_versions\1.3\django 
C:\Python26\Lib\site-packages\django_versions\1.4\django</code></li>
<li>I also put a txt file inside the django folder to easily see what version is there (this will be helpful later to double check) 
```C:\Python26\Lib\site-packages\django_versions\1.4\django\1.4.txt</li>
<li>Create a file called djangoversion.cmd and drop it in C:\Python26\Scripts  <code>junction -d C:\Python26\Lib\site-packages\django junction 
C:\Python26\Lib\site-packages\django 
C:\Python26\Lib\site-packages\django_versions\%1\django</code></li>
<li>The first line removes any links that may have been there. The second line creates a new link to the version you'll pass in.</li>
<li>Now, to switch versions, just run this from the command line: 
<code>djangoversion 1.4 
PS C:\Users\tbroder&gt; djangoversion 1.4 
C:\Users\tbroder&gt;junction -d 
C:\Python26\Lib\site-packages\django Junction v1.06 - Windows junction creator and reparse point viewer Copyright (C) 2000-2010 Mark Russinovich Sysinternals - www.sysinternals.com Deleted 
C:\Python26\Lib\site-packages\django. 
C:\Users\tbroder&gt;junction C:\Python26\Lib\site-packages\django 
C:\Python26\Lib\site-packages\django_versions\1.4\django Junction v1.06 - Windows junction creator and reparse point viewer Copyright (C) 2000-2010 Mark Russinovich Sysinternals - www.sysinternals.com Created: 
C:\Python26\Lib\site-packages\django Targetted at: 
C:\Python26\Lib\site-packages\django_versions\1.4\django PS C:\Users\tbroder&gt;</code></li>
<li>Switch as needed</li>
</ol>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Want user available in every template in Django?]]></title>
            <link href="https://www.timbroder.com/2010/12/want-user-available-in-every-template-in-django.html"/>
            <updated>2010-12-29T03:08:52+00:00</updated>
            <id>https://www.timbroder.com/2010/12/want-user-available-in-every-template-in-django.html</id>
            <content type="html"><![CDATA[<p>Create a context processor</p>

<p>settings.py</p>

<pre><code data-language="python">TEMPLATE_CONTEXT_PROCESSORS = (
    'myapp.context_processors.user',
)
</code></pre>

<p>context_processors.py</p>

<pre><code data-language="python">def user(request):
    if hasattr(request, 'user'):
        return {'user':request.user }
    return {}
</code></pre>

<p>user is now available in any template:</p>

<pre><code data-language="HTML">
{% if user.is_authenticated %}Do Something Special{% endif %}

</code></pre>

<p>source: <a href="http://stackoverflow.com/questions/41547/always-including-the-user-in-the-django-template-context" title="StackOverflow">StackOverflow</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Some reading from django-nyc]]></title>
            <link href="https://www.timbroder.com/2010/09/some-reading-from-django-nyc.html"/>
            <updated>2010-09-30T18:04:45+00:00</updated>
            <id>https://www.timbroder.com/2010/09/some-reading-from-django-nyc.html</id>
            <content type="html"><![CDATA[<p>Went to the <a href="http://www.djangonyc.org/">django-nyc</a> meetup last night, it was
in Manhattan and much easier to get to then when it's at huge in bk.  Wrote
down a few things to read up on:</p>

<ul>
<li><a href="http://celeryproject.org/">Celery</a> &#45; Celery is an asynchronous task queue/job queue based on distributed message passing. It is focused on real-time operation, but supports scheduling as well.</li>
<li><a href="http://github.com/justinlilly/django-ideas">Django ideas</a> &#45; Voting on things with limited numbers of votes to spread around, ala UserVoice</li>
<li><a href="http://www.meetup.com/NYC-GTUG/">Google tech meetup</a></li>
<li><a href="http://code.google.com/apis/predict/">Google prediction api</a></li>
<li><a href="http://www.meetup.com/javascript-7/">Nyc js</a></li>
<li><a href="http://www.google.com/search?q=Ben+Firshman+class+based+views&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a">Ben Firshman class based views</a></li>
<li><a href="http://djangocon.blip.tv/">Django con blip tv</a></li>
<li><a href="http://djangocon.blip.tv/file/4135225/">Scaling worlds largest Django install </a></li>
<li>Maps of imaginary lands</li>
<li>Eric's keynote</li>
<li><a href="http://a.images.blip.tv/Robertlofthouse-PonyPwning373-117.jpg">Pony pwning security risks</a></li>
<li><a href="http://djangocon.blip.tv/file/4107023/">How to sell Django</a></li>
<li><a href="http://djangocon.blip.tv/file/4111172/">Nosql and Django</a></li>
<li><a href="http://djangocon.blip.tv/file/4134218/">How to come up to speed with new codebase</a></li>
<li>Frameworks</li>
<li>Virtualenv wrapper</li>
<li><a href="http://www.google.com/search?q=Fabric&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-US:official&amp;client=firefox-a#sclient=psy&amp;hl=en&amp;client=firefox-a&amp;hs=X5N&amp;rls=org.mozilla%3Aen-US%3Aofficial&amp;source=hp&amp;q=Fabric+django&amp;aq=f&amp;aqi=g1g-m1g-o1&amp;aql=&amp;oq=&amp;gs_rfai=&amp;pbx=1&amp;fp=84f34ab5383c7ee9">Fabric</a></li>
<li><a href="http://www.capistranorb.com/">Capistrana</a></li>
<li>Django picket ajax</li>
<li><a href="http://dajaxproject.com/">Dajax</a></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[select foo, count(*) from bar group by foo in django]]></title>
            <link href="https://www.timbroder.com/2010/03/select-foo-count-from-bar-group-by-foo-in-django.html"/>
            <updated>2010-03-31T16:31:06+00:00</updated>
            <id>https://www.timbroder.com/2010/03/select-foo-count-from-bar-group-by-foo-in-django.html</id>
            <content type="html"><![CDATA[<p>Every once in a while you need some old fashion SQL style queries in django.
This is a common one for reporting and aggregation.  Its fairly easy to
replicate in a queryset.  Say I wanted to get the authors and the number of
articles they have written going back to the beginning of 2009 to the
present:﻿</p>

<pre><code data-language="python">from django.db.models import Count
Article.objects
    .filter(created_date__gte=datetime.datetime(2009,1,1))
    .values('author')
    .annotate(Count('author'))
</code></pre>

<p>The result:</p>

<pre><code>[{'author__count': 1028, 'author': 17L}, {'author__count': 9, 'author': 9L}, {'author__count': 39, 'author': 12L}, {'author__count': 581, 'author': 10L}, {'author__count': 15, 'author': 7L}, {'author__count': 366, 'author': 13L}, {'author__count': 233, 'author': 5L}, {'author__count': 167, 'author': 15L}, {'author__count': 287, 'author': 14L}, {'author__count': 10, 'author': 6L}, {'author__count': 2101, 'author': 16L}]
</code></pre>
]]></content>
        </entry>
    </feed>