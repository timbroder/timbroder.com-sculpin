<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <title><![CDATA[timbroder.com]]></title>
    <link href="https://www.timbroder.com/blog/tags/blogger.xml" rel="self"/>
    <link href="https://www.timbroder.com/"/>
    <updated>2018-09-09T12:21:33+00:00</updated>
    <id>https://www.timbroder.com/</id>
            <author>
            <name><![CDATA[Tim Broder]]></name>            <email><![CDATA[timothy.broder@gmail.com]]></email>        </author>
        <generator uri="http://sculpin.io/">Sculpin</generator>
            <entry>
            <title type="html"><![CDATA[gpowered.net is now timbroder.com]]></title>
            <link href="https://www.timbroder.com/2010/07/gpowered-net-is-now-timbroder-com.html"/>
            <updated>2010-07-23T19:48:27+00:00</updated>
            <id>https://www.timbroder.com/2010/07/gpowered-net-is-now-timbroder-com.html</id>
            <content type="html"><![CDATA[<p>Hi all, some of you may have noticed this site is no longer on the
gpowered.net domain.  I've been wanting to move onto wordpress for a while now
and also do some additional writing beyond code stuffs which would be outside
of the scope of gpowered.  I also unfortunately (or fortunately because I love
my <a href="http://www.alexanderinteractive.com/">job</a>) don't have as much time as I
used to to research and post how to's.  Heavy django and magento going on
lately, I'll try to post about those. There are two RSS links at the top, RSS
has everything on this site including gpowered.  the gpowered RSS will
continue to contain only tech articles. Let me know of any issues on the new
site</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Google I/O session videos posted with slides]]></title>
            <link href="https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html"/>
            <updated>2008-06-16T19:11:00+00:00</updated>
            <id>https://www.timbroder.com/2008/06/google-io-session-videos-posted-with.html</id>
            <content type="html"><![CDATA[<p>As I said <a href="http://blog.gpowered.net/2008/04/select-google-io-sessions-to-be-posted.html">earlier</a>, Quite a few presentations from Google I/O have
been <a href="http://sites.google.com/site/io/">posted</a> for your viewing pleasure.
I'll be glued to these this weekend while I'm on call.</p>

<p>Topics include<br />
Ajax<br />
KML<br />
Sketchup<br />
Android<br />
OpenSocial<br />
Appengine<br />
Data APIs<br />
Theory Talks<br />
Youtube<br />
Gears<br />
Mashups<br />
Maps<br />
and more!</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Blogger adds bloggroll]]></title>
            <link href="https://www.timbroder.com/2008/04/blogger-adds-bloggroll.html"/>
            <updated>2008-04-03T22:37:00+00:00</updated>
            <id>https://www.timbroder.com/2008/04/blogger-adds-bloggroll.html</id>
            <content type="html"><![CDATA[<p>[Blogger](http://buzz.blogger.com/2008/04/blog-list-scheduled-post-publishing-
on.html) in <a href="http://draft.blogger.com/">draft</a> added 2 new features today: a
blogroll page element, and post scheduling. Post scheduling is pretty useful,
you can write up your post, set the time (in the future) that you want it to
post, and Blogger will do it automatically. The second feature, a blogroll, I
would like a lot more if it was done better. The main thing I like about it is
that it integrates with Google Reader so if I'm linking to my friend's blogs,
I just scroll to my 'Friends' Tag and add them. The thing I don't like however
is that it does not support <a href="http://gmpg.org/xfn/">XFN</a> or
<a href="http://gmpg.org/xfn/">FOAF</a> therefore not getting picked up by the
<a href="http://code.google.com/apis/socialgraph/docs/">SocialGraph API</a>. For example,
if I linked to my <a href="http://maybe-not.net/" title="Laura's blog">girlfriend's blog</a>,
the blogroll just lists this as</p>

<pre><code data-language="HTML">&lt;a href='http://maybe-not.net/' target='_blank'&gt;Maybe-Not&lt;/a&gt;
</code></pre>

<p>A better link, for example from a <a href="http://www.wordpress.org">wordpress</a>
blogroll would look something like</p>

<pre><code data-language="HTML">&lt;a href="http://maybe-not.net/" rel="friend sweetheart" title="Laura&amp;#8217;s blog"&gt;Maybe-Not&lt;/a&gt;&lt; 
</code></pre>

<p>...and get picked up but the SocialGraph as having a relationship to me.
Blogger is great and I love using it, but the features of wordpress are
blowing it out of the water.</p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[October Speedlinking]]></title>
            <link href="https://www.timbroder.com/2007/11/october-speedlinking.html"/>
            <updated>2007-11-05T23:17:00+00:00</updated>
            <id>https://www.timbroder.com/2007/11/october-speedlinking.html</id>
            <content type="html"><![CDATA[<p>I haven't been able to post as often or as in depth as I'd like to have this
past month. I chalk it up mostly to work, we all love 12 hour days right? But
now that sign-off has passed and our last release of 2007 is calmly
approaching (its on Friday), things have settled down a bit. Below are some
great links from October, most of which I wanted to mention at some point and
haven't gotten a chance to until now. Enjoy.</p>

<ul>
<li><p>The <a href="http://googlemashupeditor.blogspot.com/2007/09/authenticated-calendar-support-via-new.html">JavaScript Library</a> for Google Calendar was released. This allows for authenticated, cross domain access. Hopefully Picasa Web will follow suit.</p></li>
<li><p><a href="http://googlewebtoolkit.blogspot.com/2007/09/gwt-application-development-for-iphone.html">GWT</a> goes to the iPhone</p></li>
<li><p>The <a href="http://googledataapis.blogspot.com/2007/09/python-client-library-same-great-taste.html">Python Client Library</a> came out with version 1.0.8</p></li>
<li><p>The <a href="http://gearsblog.blogspot.com/2007/09/digg-oracle-using-workerpool-as-well-as.html">Digg Oracle</a> demonstrates Gears' Worker Pool</p></li>
<li><p>Google's <a href="http://googlified.com/2007google-stock-passes-600-mark/#comment-17313">Stock broke $600</a>. It is now well over $700</p></li>
<li><p><a href="http://mashable.com/2007/10/08/orkut/">Orkut</a> ramps up for a US push</p></li>
<li><p><a href="http://gearsblog.blogspot.com/2007/10/vortex-simple-new-offline-and-sync.html">Vortex</a> combines the know-how of Dojo and Gears</p></li>
<li><p><a href="http://googlemapsapi.blogspot.com/2007/10/labeledmarker-v11-now-supporting-marker.html">LabeledMarker v1.1</a> in Google Maps comes out with Marker and Label toggling</p></li>
<li><p>Google Reader comes out with <a href="http://googlesystem.blogspot.com/2007/10/find-number-of-google-subscribers-for.html">Subscriber stats</a>. Read about the controversy <a href="http://blog.gpowered.net/2007/10/google-reader-stats-out-of-wack.html">here</a>. Google responds <a href="http://googlereader.blogspot.com/2007/10/subscriber-stats-summed-up.html">here</a></p></li>
<li><p><a href="http://googlesystem.blogspot.com/2007/10/google-maps-becomes-social.html">Google Maps Goes Social</a></p></li>
<li><p>The <a href="http://googleajaxsearchapi.blogspot.com/2007/10/direct-access-to-youtube-channels.html">AJAX Search API</a> gives direct access to YouTube Channels</p></li>
<li><p>Blogger GData JavaScript client library released with <a href="http://google-code-updates.blogspot.com/2007/10/blogger-gdata-javascript-client-library.html">offline Blogger client example</a></p></li>
<li><p>Google Code Search <a href="http://google-code-updates.blogspot.com/2007/10/tell-us-about-code-on-your-site-with.html">goes to SiteMaps</a></p></li>
<li><p>The Ajax API gets <a href="http://googleajaxsearchapi.blogspot.com/2007/10/ajax-feed-api-addition-dynamic-feed.html">Dynamic Feed Control</a></p></li>
<li><p>You can now play <a href="http://google-latlong.blogspot.com/2007/10/now-playing-youtube-videos-in-google.html">Youtube videos in Google Earth</a></p></li>
<li><p>Summer of code wrapped up with <a href="http://google-code-updates.blogspot.com/2007/10/wrapping-up-our-third-summer-of-code.html">Graduation</a></p></li>
<li><p><a href="http://mashable.com/2007/10/24/google-finance-gadgets/">Google Finance adds new Gadgets and an API</a></p></li>
<li><p>YouTubes player becomes <a href="http://googlesystem.blogspot.com/2007/10/customize-youtubes-player.html">Customizable</a></p></li>
<li><p>A Greasemonkey script lets you have <a href="http://googlesystem.blogspot.com/2007/10/nested-folders-in-gmail.html">nested folders</a> in Gmail</p></li>
<li><p>Blogger adds <a href="http://buzz.blogger.com/2007/10/subscribe-to-comments-by-email.html">Comment Notification</a></p></li>
<li><p>Google <a href="http://www.entrepreneurs-journey.com/864/possible-explanations-for-the-pagerank-penalty-sweep/"> cracks down</a> on pages selling PageRank links</p></li>
<li><p>Google contributes to <a href="http://mashable.com/2007/10/25/mysql-google/">MySQL</a></p></li>
<li><p>Google Mac <a href="http://googlemac.blogspot.com/2007/10/google-desktop-update-for-leopard.html">updates Leopard</a></p></li>
<li><p>Gmail <a href="http://gmailblog.blogspot.com/2007/10/sync-your-inbox-across-devices-with.html">enables IMAP</a></p></li>
<li><p>Google Maps gets <a href="http://googlemapsapi.blogspot.com/2007/10/clickable-polys-old-school-image-maps.html">Clickable Polygons</a></p></li>
<li><p>There is now a wizard for adding <a href="http://bloggerindraft.blogspot.com/2007/10/new-feature-gadgets-for-your-blog.html">Google Gadgets to your blog</a></p></li>
<li><p>Webmaster central fixes the <a href="http://googlewebmastercentral.blogspot.com/2007/10/dealing-with-sitemap-cross-submissions.html">Cross Domain Sitemap errors</a></p></li>
<li><p>Google maps <a href="http://feeds.feedburner.com/~r/OfficialGoogleMapsApiBlog/~3/174019883/make-your-kml-flash-y.html">adds Flash Content</a> into KLM</p></li>
<li><p><a href="http://googlesystem.blogspot.com/2007/11/google-notebook-adds-labels-and.html">Google Notebook adds labels and bookmarks</a></p></li>
<li><p>Blog Search is <a href="http://googlesystem.blogspot.com/2007/11/blog-search-included-in-google-history.html">now included</a> in Google History</p></li>
<li><p>A cheap "<a href="http://googlesystem.blogspot.com/2007/11/tentative-google-pc.html">Google PC</a>" is on the market</p></li>
<li><p>A new <a href="http://googlesystem.blogspot.com/2007/10/google-photo-picker.html">Photo Picker</a> for Gmail and Orkut pulls from Picasa</p></li>
<li><p>GTalk may soon be able to <a href="http://googlesystem.blogspot.com/2007/10/google-to-connect-to-other-im-networks.html">connect to other networks</a> like AIM and Yahoo! Talk</p></li>
<li><p>The <a href="http://googlesystem.blogspot.com/2007/10/gmails-new-version-is-now-available.html">new version</a> of Gmail comes out</p></li>
<li><p>Google Code gets a <a href="http://googlified.com/2007new-google-code/">facelift</a></p></li>
<li><p>Webmaster Tools gets <a href="http://googlified.com/2007set-geographic-target-in-webmaster-tools/">Geographic Targeting</a></p></li>
<li><p>The Google Gadget Directory gets a <a href="http://blogoscoped.com/archive/2007-11-01-n78.html">facelift</a></p></li>
<li><p>Microsoft is going to release the <a href="http://mashable.com/2007/11/04/microsoft-sync-framework/">Microsoft Sync Framework</a> to compete with Gears</p></li>
<li><p>Picasa Web gets <a href="http://googlephotos.blogspot.com/2007/11/better-connections-with-picasa-web.html">opened</a>. (Flikr can transfer a picasa album to itself)</p></li>
<li><p>Webmasters can now <a href="http://googlewebmastercentral.blogspot.com/2007/10/webmasters-can-now-provide-feedback-on.html">provide feedback</a> on sitelinks</p></li>
<li><p><a href="http://gearsblog.blogspot.com/2007/10/bloggears-offline-blogger-client.html">Blog.gears</a> comes out</p></li>
<li><p>Mapplets gets a documentation and example <a href="http://googlemapsapi.blogspot.com/2007/10/updated-documentation-examples-for.html">update</a></p></li>
<li><p>New articles are posted for <a href="http://googlemapsapi.blogspot.com/2007/10/kml-articles-abound-its-about-time.html">KML</a></p></li>
<li><p>The Ajax slideshow gets a full <a href="http://googleajaxsearchapi.blogspot.com/2007/10/slide-show-update-full-control-panel.html">Control Panel</a></p></li>
<li><p><a href="http://googlemapsapi.blogspot.com/2007/10/map-of-dead-screen-overlayed-shoot-em_31.html">Map of the Dead!!</a> Google Maps overlay shooting game!</p></li>
</ul>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Using Blogger and Feedburner Sitemaps in Webmaster Tools]]></title>
            <link href="https://www.timbroder.com/2007/09/using-blogger-and-feedburner-sitemaps.html"/>
            <updated>2007-09-20T00:20:00+00:00</updated>
            <id>https://www.timbroder.com/2007/09/using-blogger-and-feedburner-sitemaps.html</id>
            <content type="html"><![CDATA[<p>Blogger, good. FeedBurner, good. Google Webmaster tools, good. The 3 working
together? A little more difficult. A few months ago blogger <a href="http://buzz.blogger.com/2007/07/attention-FeedBurner-fans.html">added
support</a> to
have FeedBurner + blogger integration. No more editing template code, just
change a setting in blogger, and viola, FeedBurner will track all your
subscribers. However, this method did not go over so well with Google
Webmaster Tools. Previously you could just add your blog's feed as a sitemap
for you blog and the Google Bot would have no problem. If you turned on
FeedBurner however, sitemap errors popped up all over because the FeedBurner
links were on a different domain from the blog, etc..</p>

<p>Here is a way to make it work (assuming you already have a blog set up):</p>

<ol>
<li><p>Make an account on <a href="http://www.FeedBurner.com/fb/a/home">FeedBurner</a> and add your blog to it<br />
<img src="http://lh6.google.com/timothy.broder/RvE7pPREi1I/AAAAAAAAMRQ/rgAU_migW2A/s400/feedburne.jpg?imgdl=1" alt="" /></p></li>
<li><p>Then, in blogger go to settings > Site Feed > Post Feed Redirect URL and add your FeedBurner feed</p>

<p><img src="http://lh6.google.com/timothy.broder/RvE7pPREi2I/AAAAAAAAMRY/yy7Obs753HM/s400/FeedBurner2.jpg?imgdl=1" alt="" /></p>

<ol start="3">
<li>Finally, if you want to track your blog in <a href="www.google.com/webmasters/sitemaps/">Google Webmaster Tools</a> you will have to add the sitemap a little differently then normal. Add a General Web sitemap as the "rss.xml?orderby=updated" feed off of your blog. FeedBurner does not pick up this feed in the redirects, so the Google Bot will not have trouble with it.  </li>
</ol>

<p><img src="http://lh3.google.com/timothy.broder/RvE7pfREi3I/AAAAAAAAMRg/s_PLXzrV9hE/s400/FeedBurner3.jpg?imgdl=1" alt="" /></p>

<ol start="4">
<li>After this your site will be tracked by FeedBurner as well as Google Webmaster tools and the Google Bot will be able to use the sitemap properly  </li>
</ol></li>
</ol>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[Blogger resumes service]]></title>
            <link href="https://www.timbroder.com/2007/08/blogger-resumes-service.html"/>
            <updated>2007-08-22T14:52:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/blogger-resumes-service.html</id>
            <content type="html"><![CDATA[<p>Blogger was down this morning from a little after 9:30 until a few minutes
ago, but now, all is well...</p>

<p><img src="http://lh4.google.com/timothy.broder/RsxMBZE6BPI/AAAAAAAAKns/34s5L2TNEj0/s400/blogger_down1.jpg?imgdl=1" alt="" /></p>

<p><img src="http://lh5.google.com/timothy.broder/RsxMBpE6BQI/AAAAAAAAKn0/1OuOzxtuga0/s400/blogger_down2.jpg?imgdl=1" alt="" /></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Getting a list of post titles from blogger (Python)]]></title>
            <link href="https://www.timbroder.com/2007/08/howto-getting-list-of-post-titles-from.html"/>
            <updated>2007-08-11T18:25:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/howto-getting-list-of-post-titles-from.html</id>
            <content type="html"><![CDATA[<p>This will be a quick one on how to pull the titles from your blog. I'm using
it to <a href="http://gpowered.net/g/postlist">Lists the posts</a> I have available on
<a href="http://gpowered.net/g/">gPowered.net</a>. Firstly we'll set up our imports and
call to the blogger service.</p>

<pre><code data-language="python">from elementtree import ElementTree
from gdata import service
import gdata
import atom
import getopt
import sys

blog_id = 413573351281770670
blogger_service = service.GDataService('timothy.broder@gmail.com', '*****')
blogger_service.source = 'Blogger_Python_Sample-1.0'
blogger_service.service = 'blogger'
blogger_service.server = 'www.blogger.com'
blogger_service.ProgrammaticLogin()
</code></pre>

<p>For this query we're going to use the summary feed because all we really need
for this is the titles, not the full posts:</p>

<pre><code data-language="python">query = service.Query()
query.feed = '/feeds/' + str(blog_id) + '/posts/summary'
feed = blogger_service.Get(query.ToUri())
</code></pre>

<p>Then I just do a little counting so I can use the links on my site. All the
information we need is in feed.entry</p>

<pre><code data-language="python">curr_id = int(feed.total_results.text)
for entry in feed.entry:
    entry.my_id = curr_id
    curr_id -= 1
</code></pre>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Displaying Blogger feeds with PHP]]></title>
            <link href="https://www.timbroder.com/2007/08/howto-displaying-blogger-feeds-with-php.html"/>
            <updated>2007-08-05T22:44:00+00:00</updated>
            <id>https://www.timbroder.com/2007/08/howto-displaying-blogger-feeds-with-php.html</id>
            <content type="html"><![CDATA[<p>This HOWTO is going to follow the basic structure of the
<a href="http://gpowered.net/g/post/2/">Python</a> one.</p>

<p>To start out you'll have to grab the <a href="http://framework.zend.com/download/gdata">Zend Google data Client
Library</a> and then set the
include_path so you can use it</p>

<pre><code data-language="PHP">ini_set("include_path", ".:../:./include:../include:/home/gpowered/webapps/php/includes/ZendGdata-1.0.1/library");
</code></pre>

<p>We then import the parts the we'll need:</p>

<pre><code data-language="PHP">require_once 'Zend/Loader.php';
Zend_Loader::loadClass('Zend_Gdata');
Zend_Loader::loadClass('Zend_Gdata_Query');
Zend_Loader::loadClass('Zend_Gdata_ClientLogin');
</code></pre>

<p>One of the first things we're going to have to do is authenticate with google
services. There are two ways to do this: <a href="http://code.google.com/apis/blogger/developers_guide_php.html#auth_sub">AuthSub proxy authentication</a> which has a
user login using their own credentials, and <a href="http://code.google.com/apis/blogger/developers_guide_php.html#client_login"> ClientLogin username/password au
thentication</a> where you send a username and password. We will be using
ClientLogin. I built a small class called gPoweredBlogger to hold the
different parts I will need for this example.</p>

<pre><code data-language="PHP">class gPoweredBlogger{
    private $user;// = 'timothy.broder';
    private $pass;// = '**************';
    private $service;// = 'blogger';

    private $blog_id;// = '413573351281770670';
    private $uri;// = "http://www.blogger.com/feeds/" . $blog_id . "/posts/default";
    private $show_num;// = 5;

    private $client;// = Zend_Gdata_ClientLogin::getHttpClient($user, $pass, $service);
    private $gdClient;// = new Zend_Gdata($client);
    private $query;// = new Zend_Gdata_Query($uri);

    private $total_posts;

    public $output;
</code></pre>

<p>Then we start setting up our call to the service.</p>

<pre><code data-language="PHP">public function __construct($user, $pass, $blog_id){
    $this-&gt;user = $user;
    $this-&gt;pass = $pass;
    $this-&gt;service = 'blogger';

    $this-&gt;blog_id = $blog_id;
    $this-&gt;uri = "http://www.blogger.com/feeds/" . $this-&gt;blog_id . "/posts/default";
    $this-&gt;show_num = 5;

    $this-&gt;client = Zend_Gdata_ClientLogin::getHttpClient($this-&gt;user, $this-&gt;pass, $this-&gt;service);
    $this-&gt;gdClient = new Zend_Gdata($this-&gt;client);
    $this-&gt;query = new Zend_Gdata_Query($this-&gt;uri);
    $this-&gt;total_posts = $this-&gt;get_total($this-&gt;query);
}
</code></pre>

<p>For more info see the <a href="http://code.google.com/apis/blogger/developers_guide_php.html">blogger developer's guide with
php</a> or the
<a href="http://code.google.com/apis/accounts/Authentication.html">Google Account Authentication
documentation</a><br />
After we have authenticated with Google we need to start building up our query
to <a href="http://code.google.com/apis/gdata/">GData</a>. The first thing you'll need is
your blog's id.<br />
You can use the function in the dev guide to help you with this if you don't
already know it.<br />
Like the Python version, the below function returns the total number of posts
that are in the feed. We can get a small response by sending 0 for the max
results. Below is the function and the small response we get from it.</p>

<pre><code data-language="PHP">private function get_total($query){
    //query for no posts
    $this-&gt;query-&gt;setParam('max-results', '0');
    $this-&gt;query-&gt;setParam('start-index', '1');

    //get back entryless feed
    $feed = $this-&gt;gdClient-&gt;getFeed($this-&gt;query);
    return $feed-&gt;totalResults-&gt;text;
}
</code></pre>

<pre><code data-language="XML">&lt;ns0:feed xmlns:ns0="http://www.w3.org/2005/Atom"&gt;
&lt;ns1:totalresults xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;5&lt;/ns1:totalresults&gt;
&lt;ns1:itemsperpage xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;0&lt;/ns1:itemsperpage&gt;
&lt;ns1:startindex xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:startindex&gt;
&lt;ns0:generator uri="http://www.blogger.com" version="7.00"&gt;Blogger&lt;/ns0:generator&gt;
&lt;ns0:author&gt;&lt;ns0:name&gt;Tim&lt;/ns0:name&gt;&lt;/ns0:author&gt;
&lt;ns0:id&gt;tag:blogger.com,1999:blog-413573351281770670&lt;/ns0:id&gt;
&lt;ns0:link href="http://gpowered.blogspot.com/" rel="alternate" type="text/html" /&gt;
&lt;ns0:link href="http://gpowered.blogspot.com/feeds/posts/default" rel="http://schemas.google.com/g/2005#feed" type="application/atom+xml" /&gt;
&lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default?max-results=0" rel="self" type="application/atom+xml" /&gt;
&lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default" rel="http://schemas.google.com/g/2005#post" type="application/atom+xml" /&gt;
&lt;ns0:title type="text"&gt;gPowered&lt;/ns0:title&gt;
&lt;ns0:updated&gt;2007-07-18T10:55:06.728-05:00&lt;/ns0:updated&gt;
&lt;/ns0:feed&gt;
</code></pre>

<p>So we get the total number of posts and then we can start pulling data. Lets
make a generic function, PostFrom, that can be used to show multiple posts, or
just single ones, depending on what you pass to it. The start number that is
passed to PostFrom has been set to the first post in the blog is considered to
have an id of 1 and the latest post is the same as total_posts. This is useful
so if viewers want to bookmark the page they are looking at, the post that is
being displayed will not change. The following are the different functions
that will make use of it.</p>

<pre><code data-language="PHP">//show latest posts
public function Posts(){
    return $this-&gt;ListPosts($this-&gt;total_posts);
}

//show posts starting from a certain point
public function ListPosts($start){
    $start = $this-&gt;total_posts - $start + 1;
    return $this-&gt;PostFrom($start, $this-&gt;show_num);
}

//show a single post
public function Post($start){
    $start = $this-&gt;total_posts - $start + 1;
    return PostFrom($start, 1);
}

//show count number of posts starting from a certain point
private function PostFrom($start, $count){
    //query for count number of posts starting at the given post
    $this-&gt;query-&gt;setParam('max-results', $count);
    $this-&gt;query-&gt;setParam('start-index', $start);
    $feed = $this-&gt;gdClient-&gt;getFeed($this-&gt;query);
</code></pre>

<p>Now we have all the data we need in the feed variable. Its been turned into an
object so we don't have to worry about XML parsing here. Every node has become
an objects and lists. Objects for single nodes(title), and lists for where
there are multiple nodes of the same name (entry, link)</p>

<pre><code data-language="PHP">//for links
$curr_id = $this-&gt;total_posts - $start + 1;

//normalize data for output
foreach($feed-&gt;entries as $entry){
    //id for links
    $entry-&gt;my_id = $curr_id;
    $curr_id -= 1;
}
</code></pre>

<p>Of course we're going to need next and previous buttons as well. The way we've
set up the math with total_posts and the start number, we only have to
increment or decrement these by count (the number of posts to display on a
page). I also set part of the link, as well as the page title, that I will use
below in the HTML.</p>

<pre><code data-language="PHP">$prev = $this-&gt;total_posts - ($start - $count) + 1;
if($prev &gt; $total_posts){
    $prev = null;
}


$next = $this-&gt;total_posts - ($start + $count) + 1;
if($next &lt; 1){
    $next = null;
}

//showing single post
if(count == 1){
    $link = 'post';
    $title = $feed-&gt;entries[0]-&gt;title-&gt;text;
    //listing posts
}
else{
    $link = 'posts';
    $title = 'home';
}
</code></pre>

<p>The final part is to make a quick object that we can use in the HTML to output
everything</p>

<pre><code data-language="PHP">        $this-&gt;output = new Output($feed-&gt;entries, $title, $prev, $next, $link);
    }
}

class Output{
    public $entries;
    public $title;
    public $prev;
    public $next;
    public $link;
    public function __construct($entries, $title, $prev, $next, $link){
        $this-&gt;entries=$entries;
        $this-&gt;title=$title;
        $this-&gt;prev=$prev;
        $this-&gt;next=$next;
        $this-&gt;link=$link;
    }
}
</code></pre>

<p>To the HTML!</p>

<p>The first part consists of displaying the post itself, along with its relevant
information. So lets built up our objects</p>

<pre><code data-language="PHP">$blog = new gPoweredBlogger('timothy.broder', '*************', '413573351281770670');
$blog-&gt;Posts();

$output = $blog-&gt;output;
</code></pre>

<p>Below all the php we can run through out output object and display the posts</p>

<pre><code data-language="HTML">&lt;? foreach($output-&gt;entries as $entry){ ?&gt;
     &lt;h2&gt;&lt;a href="/post/&lt;? echo $entry-&gt;my_id ?&gt;"&gt;&lt;? echo $entry-&gt;title-&gt;text ?&gt;&lt;/h2&gt;&lt;/a&gt;
     &lt;? echo $entry-&gt;content-&gt;text;
     $datetime = strtotime(substr($entry-&gt;published, 0, 10) . ' ' . substr($entry-&gt;published, 11, 8 ));
     ?&gt;
     &lt;p&gt;Posted by &lt;? echo $entry-&gt;author[0]-&gt;name-&gt;text ?&gt; on &lt;? echo date("m/d/Y",$datetime) ?&gt; at &lt;? echo date("g:i a",$datetime) ?&gt;&lt;/p&gt;

      &lt;div id="divider"&gt;&lt;/div&gt;
      &lt;?}?&gt;
</code></pre>

<p>That's all for now. A working example is
<a href="http://gpowered.net/php/blogger.php">here</a></p>
]]></content>
        </entry>
            <entry>
            <title type="html"><![CDATA[HOWTO: Displaying Blogger feeds with Python]]></title>
            <link href="https://www.timbroder.com/2007/07/howto-get-blogger-feeds-using-python.html"/>
            <updated>2007-07-19T03:07:00+00:00</updated>
            <id>https://www.timbroder.com/2007/07/howto-get-blogger-feeds-using-python.html</id>
            <content type="html"><![CDATA[<p>This first HOWTO is going to cover how I did the basic structure of the posts section of gPowered: pulling from blogger. 
The main functions we'll need are to show a range of posts, a single post, and a function to get the total number of posts that are in the blog.
The reason I try to get the total number is so the different pages can be bookmarkable.  When retrieving a GData feed from blogger.  Entry 1 in the feed is going to be the newest post so there is no 'id' that is going to be static, so we'll do a little math to get a number we can later use as the id.
I use Django to handle rendering the python to the browser.  I probably won't get into other methods.</p>

<p>To start out you'll have to grab the following modules.</p>

<ul>
<li><p>the <a href="http://code.google.com/p/gdata-python-client/downloads/list">gdata python client</a></p></li>
<li><p><a href="http://effbot.org/zone/element-index.htm">ElementTree</a></p></li>
<li><p><a href="http://www.egenix.com/products/python/mxBase/mxDateTime/">mxDateTime</a> (I used this for date formatting)</p></li>
</ul>

<p>We then import the parts the we'll need (you can ignore the Django part for your own methods):</p>

<pre><code data-language="python">    from Django.shortcuts import render_to_response

    from gdata import service
    import gdata
    import atom
    import getopt
    import sys

    from mx import DateTime
</code></pre>

<p>One of the first things we're going to have to do is authenticate with google services.
There are two ways to do this: <a href="http://code.google.com/apis/blogger/developers_guide_python.html#auth_sub">AuthSub proxy authentication</a> which has a user login using their own credentials, and
 <a href="http://code.google.com/apis/blogger/developers_guide_python.html#client_login"> ClientLogin username/password authentication</a> where you send a username and password.  We will be using ClientLogin.
 First off, set your login credentials to use later.</p>

<pre><code data-language="python">    #login info
    user = 'timothy.broder@gmail.com'
    password = '********'
</code></pre>

<p>Then we start setting up our call to the service.</p>

<pre><code data-language="python">    #set up service
    blogger_service = service.GDataService(user, password)
    blogger_service.source = 'gpowered'
    blogger_service.service = 'blogger'
    blogger_service.server = 'www.blogger.com'
    blogger_service.ProgrammaticLogin()
</code></pre>

<p>For more info see the <a href="http://code.google.com/apis/blogger/developers_guide_python.html">blogger developer's guide with python</a> or the <a href="http://code.google.com/apis/accounts/Authentication.html">Google Account Authentication documentation</a></p>

<p>After we have authenticated with Google we need to start building up our query to <a href="http://code.google.com/apis/gdata/">GData</a>, which will return as an ElementTree of data.  The first thing you'll need is your blog's id.</p>

<p>You can use the function in the dev guide to help you with this if you don't already know it.</p>

<pre><code data-language="python">    def PrintUserBlogTitles(blogger_service):
      query = service.Query()
      query.feed = '/feeds/default/blogs'
      feed = blogger_service.Get(query.ToUri())

      print feed.title.text
      for entry in feed.entry:
        print "\t" + entry.title.text
</code></pre>

<p>After you have the blog id we can start working on the query</p>

<pre><code data-language="python">    blog_id = 413573351281770670
    feed_url = '/feeds/%s/posts/default' % str(blog_id)
    query = service.Query()
    query.feed = feed_url
</code></pre>

<p>The below function returns the total number of posts that are in the feed.  We can get a small response by sending 0 for the max results.  Below is the function and the small response we get from it.</p>

<pre><code data-language="python">    #get the total number of posts for this feed
    def get_total(query):
     #query for no posts
     query.max_results = '0'
     query.start_index = '1'

     #get back entryless feed
     feed = blogger_service.Get(query.ToUri()) 
     return int(feed.total_results.text)
</code></pre>

<pre><code data-language="xml">    &lt;ns0:feed xmlns:ns0="http://www.w3.org/2005/Atom"&gt;
     &lt;ns1:totalresults xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:totalresults&gt;
     &lt;ns1:itemsperpage xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;0&lt;/ns1:itemsperpage&gt;
     &lt;ns1:startindex xmlns:ns1="http://a9.com/-/spec/opensearchrss/1.0/"&gt;1&lt;/ns1:startindex&gt;
     &lt;ns0:generator version="7.00" uri="http://www.blogger.com"&gt;Blogger&lt;/ns0:generator&gt;
     &lt;ns0:author&gt;&lt;ns0:name&gt;Tim&lt;/ns0:name&gt;&lt;/ns0:author&gt;
     &lt;ns0:id&gt;tag:blogger.com,1999:blog-413573351281770670&lt;/ns0:id&gt;
     &lt;ns0:link href="http://gpowered.blogspot.com/" type="text/html" rel="alternate"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://gpowered.blogspot.com/feeds/posts/default" type="application/atom+xml" rel="http://schemas.google.com/g/2005#feed"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default?max-results=0" type="application/atom+xml" rel="self"&gt;&lt;/ns0:link&gt;
     &lt;ns0:link href="http://www.blogger.com/feeds/413573351281770670/posts/default" type="application/atom+xml" rel="http://schemas.google.com/g/2005#post"&gt;&lt;/ns0:link&gt;
     &lt;ns0:title type="text"&gt;gPowered&lt;/ns0:title&gt;
     &lt;ns0:updated&gt;2007-07-18T10:55:06.728-05:00&lt;/ns0:updated&gt;
    &lt;/ns0:feed&gt;
</code></pre>

<p>So we get the total number of posts and then we can start pulling data.  Lets make a generic function, PostFrom, that can be used to show multiple posts, or just single ones, depending on what you pass to it.  The start number that is passed to PostFrom has been set to the first post in the blog is considered to have an id of 1 and the latest post is the same as total_posts.  This is useful so if viewers want to bookmark the page they are looking at, the post that is being displayed will not change.
The following are the different functions that will make use of it.</p>

<pre><code data-language="python">    #show latest posts
    def Posts(request):
     return ListPosts(request, total_posts)

    #show posts starting from a certain point 
    def ListPosts(request, start):
     start = total_posts - int(start) + 1
     return PostFrom(request, start, show_num)

    #show a single post
    def Post(request, start):
     start = total_posts - int(start) + 1
     return PostFrom(request, start, 1)

    def PostFrom(request, start, count):
     #query for count number of posts starting at the given post
     query.max_results = str(count)
     query.start_index = str(start)
     feed = blogger_service.Get(query.ToUri())
</code></pre>

<p>Now we have all the data we need in the feed variable.  Its been turned into an element tree so we don't have to worry about XML parsing here.  Every node has become an objects and lists.  Objects for single nodes(title), and lists for where there are multiple nodes of the same name (entry, link)
At this stage I play with the data a little so it's easier to use in my Django template.</p>

<pre><code data-language="python">     #normalize data for output
     for entry in feed.entry:
      #get link for template
      entry.my_link = entry.link[0].href

      #id for links
      entry.my_id = curr_id
      curr_id -= 1

      #format published date
      dt = DateTime.ISO.ParseDateTimeUTC(entry.published.text)
      entry.my_date = dt.strftime('%m/%d/%Y')
      entry.my_time = dt.strftime('%I:%M %p') 
</code></pre>

<p>Of course we're going to need next and previous buttons as well.  The way we've set up the math with total_posts and the start number, we only have to increment or decrement these by count (the number of posts to display on a page).  I also set part of the link, as well as the page title, that I will use in my template.</p>

<pre><code data-language="python">     prev = total_posts - (start - count) + 1
     if prev &gt; total_posts:
      prev = None


     next = total_posts - (start + count) + 1
     if next &lt; 1:
      next = None

     #showing single post 
     if count == 1:
      link = 'post'
      title = feed.entry[0].title.text
     #listing posts
     else:
      link = 'posts'
      title = 'home'
</code></pre>

<p>The final part of the function is a return to the Django framework to populate my template.  I'm going to get into the template more in the next post, but you now have all the information you need stored.</p>

<pre><code data-language="python">     return render_to_response('posts/index.html', {
      'entries': feed.entry,
      'title': title,
      'tag_link': tag_link, 
      'prev': prev,
      'next': next,  
      'link': link,
      'tab_home': True,
      })
</code></pre>

<p>To the template!</p>

<p>The first part consists of displaying the post itself, along with its relevant information</p>

<pre><code data-language="html">    
{% for entry in entries %}

      &lt;h2&gt;&lt;a href="/post/{{ entry.my_id }}"&gt;{{ entry.title.text }}&lt;/h2&gt;&lt;/a&gt;
      {{ entry.content.text }}
      &lt;p&gt;Posted by {% for auth in entry.author %}{{ auth.name.text }}{% if not forloop.last %}, {% endif %}{% endfor %} 
      on {{ entry.my_date }} at {{ entry.my_time }}&lt;/p&gt;
      {% if entry.category %}&lt;p&gt;Labels: {% for cat in entry.category %}
       &lt;a href="{{ tag_link }}{{ cat.term }}"&gt;{{ cat.term }}&lt;/a&gt;
       {% if not forloop.last %}, {% endif %}
       {% endfor %}&lt;/p&gt;{% endif %}&lt;p&gt;&lt;a href="{{ entry.my_link }}"&gt;More...&lt;/a&gt;&lt;/p&gt;

    {% endfor %}
    
</code></pre>

<p>And the second part handles the prev and next links</p>

<pre><code data-language="html">    
    &lt;br&gt;&lt;/br&gt;
    &lt;div class="nav"&gt;
    {% if prev %}
    &lt;a href="/{{ link }}/{{ prev }}"&gt;prev&lt;/a&gt;
    {% else %}

    {% endif %}

    {% if next %}
    &lt;a href="/{{ link }}/{{ next }}"&gt;next&lt;/a&gt;
    {% else %}

    {% endif %}
    &lt;/div&gt;
    {% include 'bottom.html' %}
    
</code></pre>

<p>That's all for now. A working example is the <a href="http://gpowered.net/g/">gPowered.net</a> site I'm putting up.  All posts on there are getting pulled from this blog.  I'm going to get into tags and comments next time, as well as javascript and php versions. Stay tuned!</p>
]]></content>
        </entry>
    </feed>